// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: risk/risk.proto

package risk

import (
	common "github.com/warmplanet/proto/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 风控指标状态
type RiskStatus int32

const (
	RiskStatus_InvalidRS RiskStatus = 0
	RiskStatus_OK        RiskStatus = 1 //表示很正常
	RiskStatus_WARN      RiskStatus = 2 //表示风险严重，必须响应
	RiskStatus_MID       RiskStatus = 3 //表示风险由策略自行处理
)

// Enum value maps for RiskStatus.
var (
	RiskStatus_name = map[int32]string{
		0: "InvalidRS",
		1: "OK",
		2: "WARN",
		3: "MID",
	}
	RiskStatus_value = map[string]int32{
		"InvalidRS": 0,
		"OK":        1,
		"WARN":      2,
		"MID":       3,
	}
)

func (x RiskStatus) Enum() *RiskStatus {
	p := new(RiskStatus)
	*p = x
	return p
}

func (x RiskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_risk_risk_proto_enumTypes[0].Descriptor()
}

func (RiskStatus) Type() protoreflect.EnumType {
	return &file_risk_risk_proto_enumTypes[0]
}

func (x RiskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskStatus.Descriptor instead.
func (RiskStatus) EnumDescriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{0}
}

// 风控交易方向
type RiskTradeSide int32

const (
	RiskTradeSide_InvalidSide RiskTradeSide = 0
	RiskTradeSide_BUY         RiskTradeSide = 1
	RiskTradeSide_SELL        RiskTradeSide = 2
	RiskTradeSide_All         RiskTradeSide = 3
)

// Enum value maps for RiskTradeSide.
var (
	RiskTradeSide_name = map[int32]string{
		0: "InvalidSide",
		1: "BUY",
		2: "SELL",
		3: "All",
	}
	RiskTradeSide_value = map[string]int32{
		"InvalidSide": 0,
		"BUY":         1,
		"SELL":        2,
		"All":         3,
	}
)

func (x RiskTradeSide) Enum() *RiskTradeSide {
	p := new(RiskTradeSide)
	*p = x
	return p
}

func (x RiskTradeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskTradeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_risk_risk_proto_enumTypes[1].Descriptor()
}

func (RiskTradeSide) Type() protoreflect.EnumType {
	return &file_risk_risk_proto_enumTypes[1]
}

func (x RiskTradeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskTradeSide.Descriptor instead.
func (RiskTradeSide) EnumDescriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{1}
}

// 风控结论
type Risk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr       *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	ProjectId string            `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty"`                 //项目编号
	Status    RiskStatus        `protobuf:"varint,3,opt,name=status,proto3,enum=risk.RiskStatus" json:"status,omitempty"` //标识是否正常的最重要结论，取值为 OK、WARN、MID3个等级
	Action    *RiskAction       `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`                       //风控响应
	Info      *RiskInfo         `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`                           //风控指标
	Msg       string            `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`                             //风险内容说明
}

func (x *Risk) Reset() {
	*x = Risk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_risk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Risk) ProtoMessage() {}

func (x *Risk) ProtoReflect() protoreflect.Message {
	mi := &file_risk_risk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Risk.ProtoReflect.Descriptor instead.
func (*Risk) Descriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{0}
}

func (x *Risk) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *Risk) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Risk) GetStatus() RiskStatus {
	if x != nil {
		return x.Status
	}
	return RiskStatus_InvalidRS
}

func (x *Risk) GetAction() *RiskAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Risk) GetInfo() *RiskInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Risk) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 风控响应-停止交易区
type RiskAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopTrade  map[string]*RiskStopTrade  `protobuf:"bytes,1,rep,name=stopTrade,proto3" json:"stopTrade,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StopReason map[string]*RiskStopReason `protobuf:"bytes,2,rep,name=stopReason,proto3" json:"stopReason,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RiskAction) Reset() {
	*x = RiskAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_risk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAction) ProtoMessage() {}

func (x *RiskAction) ProtoReflect() protoreflect.Message {
	mi := &file_risk_risk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAction.ProtoReflect.Descriptor instead.
func (*RiskAction) Descriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{1}
}

func (x *RiskAction) GetStopTrade() map[string]*RiskStopTrade {
	if x != nil {
		return x.StopTrade
	}
	return nil
}

func (x *RiskAction) GetStopReason() map[string]*RiskStopReason {
	if x != nil {
		return x.StopReason
	}
	return nil
}

// 风控响应-停止交易
type RiskStopTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All     bool                     `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`                                                                                                                         //是否全部停止
	Symbols map[string]RiskTradeSide `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=risk.RiskTradeSide"` //交易标的及方向
}

func (x *RiskStopTrade) Reset() {
	*x = RiskStopTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_risk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskStopTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskStopTrade) ProtoMessage() {}

func (x *RiskStopTrade) ProtoReflect() protoreflect.Message {
	mi := &file_risk_risk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskStopTrade.ProtoReflect.Descriptor instead.
func (*RiskStopTrade) Descriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{2}
}

func (x *RiskStopTrade) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *RiskStopTrade) GetSymbols() map[string]RiskTradeSide {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 风控响应-停止原因
type RiskStopReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All     string            `protobuf:"bytes,1,opt,name=all,proto3" json:"all,omitempty"`                                                                                                 //全部停止原因
	Symbols map[string]string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //交易标的及原因
}

func (x *RiskStopReason) Reset() {
	*x = RiskStopReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_risk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskStopReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskStopReason) ProtoMessage() {}

func (x *RiskStopReason) ProtoReflect() protoreflect.Message {
	mi := &file_risk_risk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskStopReason.ProtoReflect.Descriptor instead.
func (*RiskStopReason) Descriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{3}
}

func (x *RiskStopReason) GetAll() string {
	if x != nil {
		return x.All
	}
	return ""
}

func (x *RiskStopReason) GetSymbols() map[string]string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// 风险统计
type RiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets              []*Assets          `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`                                                                                                                                                 // 项目净值
	Slippage_4All       float64            `protobuf:"fixed64,2,opt,name=slippage_4_all,json=slippage4All,proto3" json:"slippage_4_all,omitempty"`                                                                                                             //4小时滑点
	Slippage_4Detail    map[string]float64 `protobuf:"bytes,3,rep,name=slippage_4_detail,json=slippage4Detail,proto3" json:"slippage_4_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`            //4小时滑点明细 exchange0_token0_quote0-exchange1_token1_quote1:
	Slippage_12All      float64            `protobuf:"fixed64,4,opt,name=slippage_12_all,json=slippage12All,proto3" json:"slippage_12_all,omitempty"`                                                                                                          //12小时滑点
	Slippage_12Detail   map[string]float64 `protobuf:"bytes,5,rep,name=slippage_12_detail,json=slippage12Detail,proto3" json:"slippage_12_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`         //12小时滑点明细
	Slippage_24All      float64            `protobuf:"fixed64,6,opt,name=slippage_24_all,json=slippage24All,proto3" json:"slippage_24_all,omitempty"`                                                                                                          //12小时滑点
	Slippage_24Detail   map[string]float64 `protobuf:"bytes,7,rep,name=slippage_24_detail,json=slippage24Detail,proto3" json:"slippage_24_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`         //12小时滑点明细
	Income_4All         float64            `protobuf:"fixed64,8,opt,name=income_4_all,json=income4All,proto3" json:"income_4_all,omitempty"`                                                                                                                   // 4小时盈亏
	Income_4Detail      map[string]float64 `protobuf:"bytes,9,rep,name=income_4_detail,json=income4Detail,proto3" json:"income_4_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`                  //4小时盈亏明细 exchange0_token_exchange1:对冲token0的盈亏
	Income_12All        float64            `protobuf:"fixed64,10,opt,name=income_12_all,json=income12All,proto3" json:"income_12_all,omitempty"`                                                                                                               // 12小时盈亏
	Income_12Detail     map[string]float64 `protobuf:"bytes,11,rep,name=income_12_detail,json=income12Detail,proto3" json:"income_12_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`              //12小时盈亏明细
	Income_24All        float64            `protobuf:"fixed64,12,opt,name=income_24_all,json=income24All,proto3" json:"income_24_all,omitempty"`                                                                                                               // 24小时盈亏
	Income_24Detail     map[string]float64 `protobuf:"bytes,13,rep,name=income_24_detail,json=income24Detail,proto3" json:"income_24_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`              //24小时盈亏明细
	Lost_1Day           float64            `protobuf:"fixed64,14,opt,name=lost_1day,json=lost1day,proto3" json:"lost_1day,omitempty"`                                                                                                                          // 最近1天最大回撤
	Lost_1DayDetail     map[string]float64 `protobuf:"bytes,15,rep,name=lost_1day_detail,json=lost1dayDetail,proto3" json:"lost_1day_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`              //当前最大回撤明细 exchange0_token_exchange1:对冲token的最大回撤（如有）
	Lost_7Day           float64            `protobuf:"fixed64,16,opt,name=lost_7day,json=lost7day,proto3" json:"lost_7day,omitempty"`                                                                                                                          // 最近7天最大回撤
	Lost_7DayDetail     map[string]float64 `protobuf:"bytes,17,rep,name=lost_7day_detail,json=lost7dayDetail,proto3" json:"lost_7day_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`              //最近7天最大回撤明细
	ApiOk               bool               `protobuf:"varint,18,opt,name=api_ok,json=apiOk,proto3" json:"api_ok,omitempty"`                                                                                                                                    //API是否都正常
	InvalidApiDetail    []string           `protobuf:"bytes,19,rep,name=invalid_api_detail,json=invalidApiDetail,proto3" json:"invalid_api_detail,omitempty"`                                                                                                  //不正常API明细
	TransferOk          bool               `protobuf:"varint,20,opt,name=transfer_ok,json=transferOk,proto3" json:"transfer_ok,omitempty"`                                                                                                                     //交易所是否可冲提
	OrderFail_30MDetail map[string]uint64  `protobuf:"bytes,21,rep,name=order_fail_30m_detail,json=orderFail30mDetail,proto3" json:"order_fail_30m_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //最近30分钟 下单失败 exchange0_token0_quote0:失败次数
	OrderFail_1Detail   map[string]uint64  `protobuf:"bytes,22,rep,name=order_fail_1_detail,json=orderFail1Detail,proto3" json:"order_fail_1_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`       //最近1小时 下单失败 exchange0_token0_quote0:失败次数
	PositionRisk        map[string]float64 `protobuf:"bytes,23,rep,name=position_risk,json=positionRisk,proto3" json:"position_risk,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`                      //敞口风控 最敞口的价值进行风控，避免配置的繁琐 exchange0_token0:
	PendingRisk         map[string]uint64  `protobuf:"bytes,24,rep,name=pending_risk,json=pendingRisk,proto3" json:"pending_risk,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                          // 挂单情况风控 挂单的笔数或价值超过限制要风控 exchange_token_quote:挂单数量
	PendingRiskValue    map[string]float64 `protobuf:"bytes,25,rep,name=pending_risk_value,json=pendingRiskValue,proto3" json:"pending_risk_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`        // 挂单情况风控 挂单的笔数或价值超过限制要风控 exchange_token_quote_value:挂单价值
	HoldRisk            map[string]float64 `protobuf:"bytes,26,rep,name=hold_risk,json=holdRisk,proto3" json:"hold_risk,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`                                  //持仓风险 对某个币的持仓超过预订限制，需要提示风险 token0:持仓价值
}

func (x *RiskInfo) Reset() {
	*x = RiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_risk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskInfo) ProtoMessage() {}

func (x *RiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_risk_risk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskInfo.ProtoReflect.Descriptor instead.
func (*RiskInfo) Descriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{4}
}

func (x *RiskInfo) GetAssets() []*Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *RiskInfo) GetSlippage_4All() float64 {
	if x != nil {
		return x.Slippage_4All
	}
	return 0
}

func (x *RiskInfo) GetSlippage_4Detail() map[string]float64 {
	if x != nil {
		return x.Slippage_4Detail
	}
	return nil
}

func (x *RiskInfo) GetSlippage_12All() float64 {
	if x != nil {
		return x.Slippage_12All
	}
	return 0
}

func (x *RiskInfo) GetSlippage_12Detail() map[string]float64 {
	if x != nil {
		return x.Slippage_12Detail
	}
	return nil
}

func (x *RiskInfo) GetSlippage_24All() float64 {
	if x != nil {
		return x.Slippage_24All
	}
	return 0
}

func (x *RiskInfo) GetSlippage_24Detail() map[string]float64 {
	if x != nil {
		return x.Slippage_24Detail
	}
	return nil
}

func (x *RiskInfo) GetIncome_4All() float64 {
	if x != nil {
		return x.Income_4All
	}
	return 0
}

func (x *RiskInfo) GetIncome_4Detail() map[string]float64 {
	if x != nil {
		return x.Income_4Detail
	}
	return nil
}

func (x *RiskInfo) GetIncome_12All() float64 {
	if x != nil {
		return x.Income_12All
	}
	return 0
}

func (x *RiskInfo) GetIncome_12Detail() map[string]float64 {
	if x != nil {
		return x.Income_12Detail
	}
	return nil
}

func (x *RiskInfo) GetIncome_24All() float64 {
	if x != nil {
		return x.Income_24All
	}
	return 0
}

func (x *RiskInfo) GetIncome_24Detail() map[string]float64 {
	if x != nil {
		return x.Income_24Detail
	}
	return nil
}

func (x *RiskInfo) GetLost_1Day() float64 {
	if x != nil {
		return x.Lost_1Day
	}
	return 0
}

func (x *RiskInfo) GetLost_1DayDetail() map[string]float64 {
	if x != nil {
		return x.Lost_1DayDetail
	}
	return nil
}

func (x *RiskInfo) GetLost_7Day() float64 {
	if x != nil {
		return x.Lost_7Day
	}
	return 0
}

func (x *RiskInfo) GetLost_7DayDetail() map[string]float64 {
	if x != nil {
		return x.Lost_7DayDetail
	}
	return nil
}

func (x *RiskInfo) GetApiOk() bool {
	if x != nil {
		return x.ApiOk
	}
	return false
}

func (x *RiskInfo) GetInvalidApiDetail() []string {
	if x != nil {
		return x.InvalidApiDetail
	}
	return nil
}

func (x *RiskInfo) GetTransferOk() bool {
	if x != nil {
		return x.TransferOk
	}
	return false
}

func (x *RiskInfo) GetOrderFail_30MDetail() map[string]uint64 {
	if x != nil {
		return x.OrderFail_30MDetail
	}
	return nil
}

func (x *RiskInfo) GetOrderFail_1Detail() map[string]uint64 {
	if x != nil {
		return x.OrderFail_1Detail
	}
	return nil
}

func (x *RiskInfo) GetPositionRisk() map[string]float64 {
	if x != nil {
		return x.PositionRisk
	}
	return nil
}

func (x *RiskInfo) GetPendingRisk() map[string]uint64 {
	if x != nil {
		return x.PendingRisk
	}
	return nil
}

func (x *RiskInfo) GetPendingRiskValue() map[string]float64 {
	if x != nil {
		return x.PendingRiskValue
	}
	return nil
}

func (x *RiskInfo) GetHoldRisk() map[string]float64 {
	if x != nil {
		return x.HoldRisk
	}
	return nil
}

// 当前资产净值
type Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange common.Exchange `protobuf:"varint,1,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"` //交易所
	Asset    []*Asset        `protobuf:"bytes,2,rep,name=asset,proto3" json:"asset,omitempty"`                      //资产净值
}

func (x *Assets) Reset() {
	*x = Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_risk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_risk_risk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{5}
}

func (x *Assets) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *Assets) GetAsset() []*Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// 资产净值
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`     //币种
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"` //数量
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risk_risk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_risk_risk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_risk_risk_proto_rawDescGZIP(), []int{6}
}

func (x *Asset) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Asset) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_risk_risk_proto protoreflect.FileDescriptor

var file_risk_risk_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcc, 0x01, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0xb5, 0x02, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a,
	0x51, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69,
	0x73, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b,
	0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x1a, 0x4f, 0x0a, 0x0c, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e,
	0x52, 0x69, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a,
	0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x13, 0x0a, 0x08, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6c, 0x69,
	0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x34, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x34, 0x41, 0x6c, 0x6c, 0x12,
	0x4f, 0x0a, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x34, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x73,
	0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6c, 0x69, 0x70, 0x70,
	0x61, 0x67, 0x65, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x32, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x6c, 0x69, 0x70, 0x70,
	0x61, 0x67, 0x65, 0x31, 0x32, 0x41, 0x6c, 0x6c, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x31, 0x32, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x31, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x32, 0x34, 0x5f, 0x61, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x32,
	0x34, 0x41, 0x6c, 0x6c, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x32, 0x34, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x32, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65,
	0x32, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x5f, 0x34, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x34, 0x41, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x34, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x34, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x31, 0x32, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x31, 0x32, 0x41, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x31, 0x32, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x31, 0x32, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x31,
	0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x32, 0x34, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x32, 0x34, 0x41, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x32, 0x34, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x32, 0x34, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x32, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73,
	0x74, 0x5f, 0x31, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f,
	0x73, 0x74, 0x31, 0x64, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x31,
	0x64, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4c, 0x6f, 0x73, 0x74, 0x31, 0x64, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x31, 0x64, 0x61, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x37, 0x64, 0x61,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x74, 0x37, 0x64, 0x61,
	0x79, 0x12, 0x4c, 0x0a, 0x10, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x37, 0x64, 0x61, 0x79, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69,
	0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x6f, 0x73, 0x74,
	0x37, 0x64, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x37, 0x64, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x70, 0x69, 0x4f, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x70, 0x69, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6f, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x6b, 0x12, 0x59, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x5f, 0x33, 0x30, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x33, 0x30,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x33, 0x30, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x53, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x31,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x31, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x31, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x0c,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b,
	0x12, 0x52, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x69, 0x73, 0x6b, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x73, 0x6b, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x69, 0x73, 0x6b,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x1a,
	0x42, 0x0a, 0x14, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x34, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x31,
	0x32, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x32, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x34, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x41, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x31, 0x32, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x32, 0x34, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x6f, 0x73, 0x74, 0x31, 0x64, 0x61,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x6f, 0x73, 0x74,
	0x37, 0x64, 0x61, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x33, 0x30, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x31,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x69, 0x73, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x06, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x69, 0x73,
	0x6b, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x35,
	0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x36, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x53,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41,
	0x52, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x3c, 0x0a,
	0x0d, 0x52, 0x69, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x69, 0x64, 0x65, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x03, 0x42, 0x3c, 0x0a, 0x15, 0x77,
	0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x69, 0x73, 0x6b, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x69, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_risk_risk_proto_rawDescOnce sync.Once
	file_risk_risk_proto_rawDescData = file_risk_risk_proto_rawDesc
)

func file_risk_risk_proto_rawDescGZIP() []byte {
	file_risk_risk_proto_rawDescOnce.Do(func() {
		file_risk_risk_proto_rawDescData = protoimpl.X.CompressGZIP(file_risk_risk_proto_rawDescData)
	})
	return file_risk_risk_proto_rawDescData
}

var file_risk_risk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_risk_risk_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_risk_risk_proto_goTypes = []interface{}{
	(RiskStatus)(0),          // 0: risk.RiskStatus
	(RiskTradeSide)(0),       // 1: risk.RiskTradeSide
	(*Risk)(nil),             // 2: risk.Risk
	(*RiskAction)(nil),       // 3: risk.RiskAction
	(*RiskStopTrade)(nil),    // 4: risk.RiskStopTrade
	(*RiskStopReason)(nil),   // 5: risk.RiskStopReason
	(*RiskInfo)(nil),         // 6: risk.RiskInfo
	(*Assets)(nil),           // 7: risk.Assets
	(*Asset)(nil),            // 8: risk.Asset
	nil,                      // 9: risk.RiskAction.StopTradeEntry
	nil,                      // 10: risk.RiskAction.StopReasonEntry
	nil,                      // 11: risk.RiskStopTrade.SymbolsEntry
	nil,                      // 12: risk.RiskStopReason.SymbolsEntry
	nil,                      // 13: risk.RiskInfo.Slippage4DetailEntry
	nil,                      // 14: risk.RiskInfo.Slippage12DetailEntry
	nil,                      // 15: risk.RiskInfo.Slippage24DetailEntry
	nil,                      // 16: risk.RiskInfo.Income4DetailEntry
	nil,                      // 17: risk.RiskInfo.Income12DetailEntry
	nil,                      // 18: risk.RiskInfo.Income24DetailEntry
	nil,                      // 19: risk.RiskInfo.Lost1dayDetailEntry
	nil,                      // 20: risk.RiskInfo.Lost7dayDetailEntry
	nil,                      // 21: risk.RiskInfo.OrderFail30mDetailEntry
	nil,                      // 22: risk.RiskInfo.OrderFail1DetailEntry
	nil,                      // 23: risk.RiskInfo.PositionRiskEntry
	nil,                      // 24: risk.RiskInfo.PendingRiskEntry
	nil,                      // 25: risk.RiskInfo.PendingRiskValueEntry
	nil,                      // 26: risk.RiskInfo.HoldRiskEntry
	(*common.MsgHeader)(nil), // 27: MsgHeader
	(common.Exchange)(0),     // 28: Exchange
}
var file_risk_risk_proto_depIdxs = []int32{
	27, // 0: risk.Risk.hdr:type_name -> MsgHeader
	0,  // 1: risk.Risk.status:type_name -> risk.RiskStatus
	3,  // 2: risk.Risk.action:type_name -> risk.RiskAction
	6,  // 3: risk.Risk.info:type_name -> risk.RiskInfo
	9,  // 4: risk.RiskAction.stopTrade:type_name -> risk.RiskAction.StopTradeEntry
	10, // 5: risk.RiskAction.stopReason:type_name -> risk.RiskAction.StopReasonEntry
	11, // 6: risk.RiskStopTrade.symbols:type_name -> risk.RiskStopTrade.SymbolsEntry
	12, // 7: risk.RiskStopReason.symbols:type_name -> risk.RiskStopReason.SymbolsEntry
	7,  // 8: risk.RiskInfo.assets:type_name -> risk.Assets
	13, // 9: risk.RiskInfo.slippage_4_detail:type_name -> risk.RiskInfo.Slippage4DetailEntry
	14, // 10: risk.RiskInfo.slippage_12_detail:type_name -> risk.RiskInfo.Slippage12DetailEntry
	15, // 11: risk.RiskInfo.slippage_24_detail:type_name -> risk.RiskInfo.Slippage24DetailEntry
	16, // 12: risk.RiskInfo.income_4_detail:type_name -> risk.RiskInfo.Income4DetailEntry
	17, // 13: risk.RiskInfo.income_12_detail:type_name -> risk.RiskInfo.Income12DetailEntry
	18, // 14: risk.RiskInfo.income_24_detail:type_name -> risk.RiskInfo.Income24DetailEntry
	19, // 15: risk.RiskInfo.lost_1day_detail:type_name -> risk.RiskInfo.Lost1dayDetailEntry
	20, // 16: risk.RiskInfo.lost_7day_detail:type_name -> risk.RiskInfo.Lost7dayDetailEntry
	21, // 17: risk.RiskInfo.order_fail_30m_detail:type_name -> risk.RiskInfo.OrderFail30mDetailEntry
	22, // 18: risk.RiskInfo.order_fail_1_detail:type_name -> risk.RiskInfo.OrderFail1DetailEntry
	23, // 19: risk.RiskInfo.position_risk:type_name -> risk.RiskInfo.PositionRiskEntry
	24, // 20: risk.RiskInfo.pending_risk:type_name -> risk.RiskInfo.PendingRiskEntry
	25, // 21: risk.RiskInfo.pending_risk_value:type_name -> risk.RiskInfo.PendingRiskValueEntry
	26, // 22: risk.RiskInfo.hold_risk:type_name -> risk.RiskInfo.HoldRiskEntry
	28, // 23: risk.Assets.exchange:type_name -> Exchange
	8,  // 24: risk.Assets.asset:type_name -> risk.Asset
	4,  // 25: risk.RiskAction.StopTradeEntry.value:type_name -> risk.RiskStopTrade
	5,  // 26: risk.RiskAction.StopReasonEntry.value:type_name -> risk.RiskStopReason
	1,  // 27: risk.RiskStopTrade.SymbolsEntry.value:type_name -> risk.RiskTradeSide
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_risk_risk_proto_init() }
func file_risk_risk_proto_init() {
	if File_risk_risk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_risk_risk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Risk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_risk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_risk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskStopTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_risk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskStopReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_risk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_risk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risk_risk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_risk_risk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_risk_risk_proto_goTypes,
		DependencyIndexes: file_risk_risk_proto_depIdxs,
		EnumInfos:         file_risk_risk_proto_enumTypes,
		MessageInfos:      file_risk_risk_proto_msgTypes,
	}.Build()
	File_risk_risk_proto = out.File
	file_risk_risk_proto_rawDesc = nil
	file_risk_risk_proto_goTypes = nil
	file_risk_risk_proto_depIdxs = nil
}
