// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: ordertool_wap/waptool.proto

package ordertool_wap

import (
	common "github.com/warmplanet/proto/go/common"
	order "github.com/warmplanet/proto/go/order"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradingReqInfoWAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr              *common.MsgHeader  `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	ProjectId        string             `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`                           //项目代码
	ExchangeId       common.Exchange    `protobuf:"varint,5,opt,name=exchange_id,json=exchangeId,proto3,enum=Exchange" json:"exchange_id,omitempty"`         //交易所代码
	AccountId        []byte             `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                           //账户代码
	ReqNo            int64              `protobuf:"varint,7,opt,name=req_no,json=reqNo,proto3" json:"req_no,omitempty"`                                      //交易请求编号，需申请者自己保持好唯一性
	Hedge            int64              `protobuf:"varint,8,opt,name=hedge,proto3" json:"hedge,omitempty"`                                                   //所属对冲组编号
	Market           common.Market      `protobuf:"varint,9,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                                     //所属交易区
	Token            string             `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`                                                   //基本币
	Quote            string             `protobuf:"bytes,11,opt,name=quote,proto3" json:"quote,omitempty"`                                                   //计价币
	Amount           float64            `protobuf:"fixed64,15,opt,name=amount,proto3" json:"amount,omitempty"`                                               //下单交易量
	PriceUpper       float64            `protobuf:"fixed64,16,opt,name=price_upper,json=priceUpper,proto3" json:"price_upper,omitempty"`                     //价格上限，为0则无限制
	PriceLower       float64            `protobuf:"fixed64,17,opt,name=price_lower,json=priceLower,proto3" json:"price_lower,omitempty"`                     //价格下限，为0则无限制
	Tolerance        float64            `protobuf:"fixed64,18,opt,name=tolerance,proto3" json:"tolerance,omitempty"`                                         //对于挂单价格与盘口价格的可容忍偏移度，0为无偏移，正值为有利偏移，负值为不利偏移
	Pricestart       float64            `protobuf:"fixed64,19,opt,name=pricestart,proto3" json:"pricestart,omitempty"`                                       //参考起始交易价格，0则不指定起始交易价格，以盘口价格为准
	Priceshift       float64            `protobuf:"fixed64,20,opt,name=priceshift,proto3" json:"priceshift,omitempty"`                                       //在多发maker订单模式下，此量为价格的最低偏移量（相对于本方已下订单）；在逐步增仓/减仓模式下，此量为下一个操作价格的变动比例
	Type             order.OrderSysType `protobuf:"varint,21,opt,name=type,proto3,enum=order.OrderSysType" json:"type,omitempty"`                            //订单类型，区分cex和dex：TradeCEX/TradeDEX
	TradeSide        order.TradeSide    `protobuf:"varint,22,opt,name=trade_side,json=tradeSide,proto3,enum=order.TradeSide" json:"trade_side,omitempty"`    //交易方向
	Contract         common.SymbolType  `protobuf:"varint,23,opt,name=contract,proto3,enum=SymbolType" json:"contract,omitempty"`                            //交易类型
	TradeType        order.TradeType    `protobuf:"varint,24,opt,name=trade_type,json=tradeType,proto3,enum=order.TradeType" json:"trade_type,omitempty"`    //taker or maker, 0 则默认转成maker执行
	QuoteBased       bool               `protobuf:"varint,25,opt,name=quote_based,json=quoteBased,proto3" json:"quote_based,omitempty"`                      //是否计价币本位（U本位）
	TimeLimit        int64              `protobuf:"varint,26,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`                         //交易时长限制（微秒），0则无时长限制
	TimeExtend       int64              `protobuf:"varint,27,opt,name=time_extend,json=timeExtend,proto3" json:"time_extend,omitempty"`                      //扩展交易时长限制（微秒）：当到达交易时长限制时，在扩展交易时间内用Taker的方式完成剩余交易量；0或者等于TimeLimit则无扩展时长（到时直接结束）
	OrderLifeTime    int64              `protobuf:"varint,28,opt,name=order_life_time,json=orderLifeTime,proto3" json:"order_life_time,omitempty"`           //Maker订单的生存时长（微秒），0则使用默认时长（暂定100毫秒）
	ExposedAmount    float64            `protobuf:"fixed64,29,opt,name=exposed_amount,json=exposedAmount,proto3" json:"exposed_amount,omitempty"`            //暴露量（在指定价位，可挂单的量），0则不需考虑暴露问题
	FinishedMinRate  float64            `protobuf:"fixed64,30,opt,name=finished_min_rate,json=finishedMinRate,proto3" json:"finished_min_rate,omitempty"`    //需完成的最低比率，0则按照默认最低成交比率执行
	TimeFrequence    float64            `protobuf:"fixed64,31,opt,name=time_frequence,json=timeFrequence,proto3" json:"time_frequence,omitempty"`            //按时间进度均匀委托的下单频度，0则不考虑时间分布
	SingleOrderLimit float64            `protobuf:"fixed64,32,opt,name=single_order_limit,json=singleOrderLimit,proto3" json:"single_order_limit,omitempty"` //划分订单的单个订单限量，0则不需要分单（可用于分单模式、加速maker单模式、逐步增减仓模式）
	Multimakers      int64              `protobuf:"varint,33,opt,name=multimakers,proto3" json:"multimakers,omitempty"`                                      //同时可多发订单的数量，用于加速发送maker单
}

func (x *TradingReqInfoWAP) Reset() {
	*x = TradingReqInfoWAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordertool_wap_waptool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingReqInfoWAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingReqInfoWAP) ProtoMessage() {}

func (x *TradingReqInfoWAP) ProtoReflect() protoreflect.Message {
	mi := &file_ordertool_wap_waptool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingReqInfoWAP.ProtoReflect.Descriptor instead.
func (*TradingReqInfoWAP) Descriptor() ([]byte, []int) {
	return file_ordertool_wap_waptool_proto_rawDescGZIP(), []int{0}
}

func (x *TradingReqInfoWAP) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *TradingReqInfoWAP) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TradingReqInfoWAP) GetExchangeId() common.Exchange {
	if x != nil {
		return x.ExchangeId
	}
	return common.Exchange(0)
}

func (x *TradingReqInfoWAP) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *TradingReqInfoWAP) GetReqNo() int64 {
	if x != nil {
		return x.ReqNo
	}
	return 0
}

func (x *TradingReqInfoWAP) GetHedge() int64 {
	if x != nil {
		return x.Hedge
	}
	return 0
}

func (x *TradingReqInfoWAP) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *TradingReqInfoWAP) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TradingReqInfoWAP) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *TradingReqInfoWAP) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TradingReqInfoWAP) GetPriceUpper() float64 {
	if x != nil {
		return x.PriceUpper
	}
	return 0
}

func (x *TradingReqInfoWAP) GetPriceLower() float64 {
	if x != nil {
		return x.PriceLower
	}
	return 0
}

func (x *TradingReqInfoWAP) GetTolerance() float64 {
	if x != nil {
		return x.Tolerance
	}
	return 0
}

func (x *TradingReqInfoWAP) GetPricestart() float64 {
	if x != nil {
		return x.Pricestart
	}
	return 0
}

func (x *TradingReqInfoWAP) GetPriceshift() float64 {
	if x != nil {
		return x.Priceshift
	}
	return 0
}

func (x *TradingReqInfoWAP) GetType() order.OrderSysType {
	if x != nil {
		return x.Type
	}
	return order.OrderSysType(0)
}

func (x *TradingReqInfoWAP) GetTradeSide() order.TradeSide {
	if x != nil {
		return x.TradeSide
	}
	return order.TradeSide(0)
}

func (x *TradingReqInfoWAP) GetContract() common.SymbolType {
	if x != nil {
		return x.Contract
	}
	return common.SymbolType(0)
}

func (x *TradingReqInfoWAP) GetTradeType() order.TradeType {
	if x != nil {
		return x.TradeType
	}
	return order.TradeType(0)
}

func (x *TradingReqInfoWAP) GetQuoteBased() bool {
	if x != nil {
		return x.QuoteBased
	}
	return false
}

func (x *TradingReqInfoWAP) GetTimeLimit() int64 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *TradingReqInfoWAP) GetTimeExtend() int64 {
	if x != nil {
		return x.TimeExtend
	}
	return 0
}

func (x *TradingReqInfoWAP) GetOrderLifeTime() int64 {
	if x != nil {
		return x.OrderLifeTime
	}
	return 0
}

func (x *TradingReqInfoWAP) GetExposedAmount() float64 {
	if x != nil {
		return x.ExposedAmount
	}
	return 0
}

func (x *TradingReqInfoWAP) GetFinishedMinRate() float64 {
	if x != nil {
		return x.FinishedMinRate
	}
	return 0
}

func (x *TradingReqInfoWAP) GetTimeFrequence() float64 {
	if x != nil {
		return x.TimeFrequence
	}
	return 0
}

func (x *TradingReqInfoWAP) GetSingleOrderLimit() float64 {
	if x != nil {
		return x.SingleOrderLimit
	}
	return 0
}

func (x *TradingReqInfoWAP) GetMultimakers() int64 {
	if x != nil {
		return x.Multimakers
	}
	return 0
}

type TradingStatusInfoWAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr          *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Producer     []byte            `protobuf:"bytes,5,opt,name=producer,proto3" json:"producer,omitempty"`                                // 订单产生者
	ReqNo        int64             `protobuf:"varint,6,opt,name=req_no,json=reqNo,proto3" json:"req_no,omitempty"`                        // 订单产生者唯一id
	AmountFilled float64           `protobuf:"fixed64,10,opt,name=amount_filled,json=amountFilled,proto3" json:"amount_filled,omitempty"` //已完成的交易量
	PriceFilled  float64           `protobuf:"fixed64,11,opt,name=price_filled,json=priceFilled,proto3" json:"price_filled,omitempty"`    //平均成交价格
	StartTs      int64             `protobuf:"varint,20,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`                 //发起交易时间
	UpdateTs     int64             `protobuf:"varint,21,opt,name=update_ts,json=updateTs,proto3" json:"update_ts,omitempty"`              //交易完成时间
}

func (x *TradingStatusInfoWAP) Reset() {
	*x = TradingStatusInfoWAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordertool_wap_waptool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingStatusInfoWAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingStatusInfoWAP) ProtoMessage() {}

func (x *TradingStatusInfoWAP) ProtoReflect() protoreflect.Message {
	mi := &file_ordertool_wap_waptool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingStatusInfoWAP.ProtoReflect.Descriptor instead.
func (*TradingStatusInfoWAP) Descriptor() ([]byte, []int) {
	return file_ordertool_wap_waptool_proto_rawDescGZIP(), []int{1}
}

func (x *TradingStatusInfoWAP) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *TradingStatusInfoWAP) GetProducer() []byte {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *TradingStatusInfoWAP) GetReqNo() int64 {
	if x != nil {
		return x.ReqNo
	}
	return 0
}

func (x *TradingStatusInfoWAP) GetAmountFilled() float64 {
	if x != nil {
		return x.AmountFilled
	}
	return 0
}

func (x *TradingStatusInfoWAP) GetPriceFilled() float64 {
	if x != nil {
		return x.PriceFilled
	}
	return 0
}

func (x *TradingStatusInfoWAP) GetStartTs() int64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *TradingStatusInfoWAP) GetUpdateTs() int64 {
	if x != nil {
		return x.UpdateTs
	}
	return 0
}

var File_ordertool_wap_waptool_proto protoreflect.FileDescriptor

var file_ordertool_wap_waptool_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x61, 0x70, 0x2f,
	0x77, 0x61, 0x70, 0x74, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x61, 0x70, 0x1a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x07, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x41, 0x50, 0x12, 0x1c,
	0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73,
	0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x65, 0x64, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x66,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x4d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x22,
	0xe7, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x41, 0x50, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73, 0x42, 0x4e, 0x0a, 0x1e, 0x77, 0x61, 0x72,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x61, 0x70, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ordertool_wap_waptool_proto_rawDescOnce sync.Once
	file_ordertool_wap_waptool_proto_rawDescData = file_ordertool_wap_waptool_proto_rawDesc
)

func file_ordertool_wap_waptool_proto_rawDescGZIP() []byte {
	file_ordertool_wap_waptool_proto_rawDescOnce.Do(func() {
		file_ordertool_wap_waptool_proto_rawDescData = protoimpl.X.CompressGZIP(file_ordertool_wap_waptool_proto_rawDescData)
	})
	return file_ordertool_wap_waptool_proto_rawDescData
}

var file_ordertool_wap_waptool_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ordertool_wap_waptool_proto_goTypes = []interface{}{
	(*TradingReqInfoWAP)(nil),    // 0: ordertool_wap.TradingReqInfoWAP
	(*TradingStatusInfoWAP)(nil), // 1: ordertool_wap.TradingStatusInfoWAP
	(*common.MsgHeader)(nil),     // 2: MsgHeader
	(common.Exchange)(0),         // 3: Exchange
	(common.Market)(0),           // 4: Market
	(order.OrderSysType)(0),      // 5: order.OrderSysType
	(order.TradeSide)(0),         // 6: order.TradeSide
	(common.SymbolType)(0),       // 7: SymbolType
	(order.TradeType)(0),         // 8: order.TradeType
}
var file_ordertool_wap_waptool_proto_depIdxs = []int32{
	2, // 0: ordertool_wap.TradingReqInfoWAP.hdr:type_name -> MsgHeader
	3, // 1: ordertool_wap.TradingReqInfoWAP.exchange_id:type_name -> Exchange
	4, // 2: ordertool_wap.TradingReqInfoWAP.market:type_name -> Market
	5, // 3: ordertool_wap.TradingReqInfoWAP.type:type_name -> order.OrderSysType
	6, // 4: ordertool_wap.TradingReqInfoWAP.trade_side:type_name -> order.TradeSide
	7, // 5: ordertool_wap.TradingReqInfoWAP.contract:type_name -> SymbolType
	8, // 6: ordertool_wap.TradingReqInfoWAP.trade_type:type_name -> order.TradeType
	2, // 7: ordertool_wap.TradingStatusInfoWAP.hdr:type_name -> MsgHeader
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ordertool_wap_waptool_proto_init() }
func file_ordertool_wap_waptool_proto_init() {
	if File_ordertool_wap_waptool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ordertool_wap_waptool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingReqInfoWAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordertool_wap_waptool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingStatusInfoWAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ordertool_wap_waptool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ordertool_wap_waptool_proto_goTypes,
		DependencyIndexes: file_ordertool_wap_waptool_proto_depIdxs,
		MessageInfos:      file_ordertool_wap_waptool_proto_msgTypes,
	}.Build()
	File_ordertool_wap_waptool_proto = out.File
	file_ordertool_wap_waptool_proto_rawDesc = nil
	file_ordertool_wap_waptool_proto_goTypes = nil
	file_ordertool_wap_waptool_proto_depIdxs = nil
}
