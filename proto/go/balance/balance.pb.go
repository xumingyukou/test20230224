// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: balance/balance.proto

package balance

import (
	common "github.com/warmplanet/proto/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BalanceSpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr             *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	ProjectId       string            `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AccountId       []byte            `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                      //账户代码
	Exchange        common.Exchange   `protobuf:"varint,7,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"`                          //所属交易所代码
	Market          common.Market     `protobuf:"varint,8,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                                //所属交易区
	Token           string            `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`                                               //基本币
	UniAccount      bool              `protobuf:"varint,10,opt,name=uni_account,json=uniAccount,proto3" json:"uni_account,omitempty"`                 //是否全仓模式
	Spot            float64           `protobuf:"fixed64,15,opt,name=spot,proto3" json:"spot,omitempty"`                                              //现货量
	Frozen          float64           `protobuf:"fixed64,16,opt,name=frozen,proto3" json:"frozen,omitempty"`                                          //冻结量
	Available       float64           `protobuf:"fixed64,17,opt,name=available,proto3" json:"available,omitempty"`                                    //可用量		available = spot - frozen
	ActualAvailable float64           `protobuf:"fixed64,18,opt,name=actual_available,json=actualAvailable,proto3" json:"actual_available,omitempty"` //实际可用量	actual_available = spot - frozen - reserved
	Reserved        float64           `protobuf:"fixed64,19,opt,name=reserved,proto3" json:"reserved,omitempty"`                                      // 保留量，为预期对冲单锁定的仓位
	StableToken     string            `protobuf:"bytes,21,opt,name=stable_token,json=stableToken,proto3" json:"stable_token,omitempty"`               //计价稳定币
	TotalMargin     float64           `protobuf:"fixed64,22,opt,name=total_margin,json=totalMargin,proto3" json:"total_margin,omitempty"`             //总保证金/权益，以稳定币计价
	PreferToken     string            `protobuf:"bytes,23,opt,name=prefer_token,json=preferToken,proto3" json:"prefer_token,omitempty"`               //计价币（非计价稳定币，某些交易所用于币本位的全仓模式或统一账户模式计价）
	TokenMargin     float64           `protobuf:"fixed64,24,opt,name=token_margin,json=tokenMargin,proto3" json:"token_margin,omitempty"`             //总保证金/权益，以计价币计价
	ProjectRisk     float64           `protobuf:"fixed64,25,opt,name=project_risk,json=projectRisk,proto3" json:"project_risk,omitempty"`             //项目风险率
	AccountRisk     float64           `protobuf:"fixed64,26,opt,name=account_risk,json=accountRisk,proto3" json:"account_risk,omitempty"`             //账户风险率
	UpdateTs        int64             `protobuf:"varint,30,opt,name=update_ts,json=updateTs,proto3" json:"update_ts,omitempty"`                       //最近更新的时间，timestamp
	OrderId         int64             `protobuf:"varint,31,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                          //订单编号，-1表示更新来源非订单，此时OrderStatus无效
	OrderStatus     int32             `protobuf:"varint,32,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`              //订单状态编号，-1时为首次下单
}

func (x *BalanceSpot) Reset() {
	*x = BalanceSpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balance_balance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceSpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceSpot) ProtoMessage() {}

func (x *BalanceSpot) ProtoReflect() protoreflect.Message {
	mi := &file_balance_balance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceSpot.ProtoReflect.Descriptor instead.
func (*BalanceSpot) Descriptor() ([]byte, []int) {
	return file_balance_balance_proto_rawDescGZIP(), []int{0}
}

func (x *BalanceSpot) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *BalanceSpot) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BalanceSpot) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *BalanceSpot) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *BalanceSpot) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *BalanceSpot) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BalanceSpot) GetUniAccount() bool {
	if x != nil {
		return x.UniAccount
	}
	return false
}

func (x *BalanceSpot) GetSpot() float64 {
	if x != nil {
		return x.Spot
	}
	return 0
}

func (x *BalanceSpot) GetFrozen() float64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *BalanceSpot) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *BalanceSpot) GetActualAvailable() float64 {
	if x != nil {
		return x.ActualAvailable
	}
	return 0
}

func (x *BalanceSpot) GetReserved() float64 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *BalanceSpot) GetStableToken() string {
	if x != nil {
		return x.StableToken
	}
	return ""
}

func (x *BalanceSpot) GetTotalMargin() float64 {
	if x != nil {
		return x.TotalMargin
	}
	return 0
}

func (x *BalanceSpot) GetPreferToken() string {
	if x != nil {
		return x.PreferToken
	}
	return ""
}

func (x *BalanceSpot) GetTokenMargin() float64 {
	if x != nil {
		return x.TokenMargin
	}
	return 0
}

func (x *BalanceSpot) GetProjectRisk() float64 {
	if x != nil {
		return x.ProjectRisk
	}
	return 0
}

func (x *BalanceSpot) GetAccountRisk() float64 {
	if x != nil {
		return x.AccountRisk
	}
	return 0
}

func (x *BalanceSpot) GetUpdateTs() int64 {
	if x != nil {
		return x.UpdateTs
	}
	return 0
}

func (x *BalanceSpot) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *BalanceSpot) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

type BalanceMargin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr             *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	ProjectId       string            `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AccountId       []byte            `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                      //账户代码
	Exchange        common.Exchange   `protobuf:"varint,7,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"`                          //所属交易所代码
	Market          common.Market     `protobuf:"varint,8,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                                //所属交易区
	Token           string            `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`                                               //基本币
	UniAccount      bool              `protobuf:"varint,10,opt,name=uni_account,json=uniAccount,proto3" json:"uni_account,omitempty"`                 //是否全仓模式
	Margin          float64           `protobuf:"fixed64,15,opt,name=margin,proto3" json:"margin,omitempty"`                                          //现货量
	Frozen          float64           `protobuf:"fixed64,16,opt,name=frozen,proto3" json:"frozen,omitempty"`                                          //冻结量
	Available       float64           `protobuf:"fixed64,17,opt,name=available,proto3" json:"available,omitempty"`                                    //可用量
	ActualAvailable float64           `protobuf:"fixed64,18,opt,name=actual_available,json=actualAvailable,proto3" json:"actual_available,omitempty"` //实际可用量	actual_available = spot - frozen - reserved
	Reserved        float64           `protobuf:"fixed64,19,opt,name=reserved,proto3" json:"reserved,omitempty"`                                      // 保留量，为预期对冲单锁定的仓位
	Loan            float64           `protobuf:"fixed64,20,opt,name=loan,proto3" json:"loan,omitempty"`                                              // //借贷量
	LoanAvailable   float64           `protobuf:"fixed64,21,opt,name=loan_available,json=loanAvailable,proto3" json:"loan_available,omitempty"`       //可借贷量
	MarginRate      float64           `protobuf:"fixed64,22,opt,name=margin_rate,json=marginRate,proto3" json:"margin_rate,omitempty"`                //保证金调整系数
	Interest        float64           `protobuf:"fixed64,23,opt,name=interest,proto3" json:"interest,omitempty"`                                      //应付利息
	ProjectRisk     float64           `protobuf:"fixed64,25,opt,name=project_risk,json=projectRisk,proto3" json:"project_risk,omitempty"`             //项目风险率
	AccountRisk     float64           `protobuf:"fixed64,26,opt,name=account_risk,json=accountRisk,proto3" json:"account_risk,omitempty"`             //账户风险率
	MarginRisk      float64           `protobuf:"fixed64,27,opt,name=margin_risk,json=marginRisk,proto3" json:"margin_risk,omitempty"`                //账户风险率
	UpdateTs        int64             `protobuf:"varint,30,opt,name=update_ts,json=updateTs,proto3" json:"update_ts,omitempty"`                       //最近更新的时间，timestamp
	OrderId         int64             `protobuf:"varint,31,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                          //订单编号，-1表示更新来源非订单，此时OrderStatus无效
	OrderStatus     int32             `protobuf:"varint,32,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`              //订单状态编号，-1时为首次下单
	StableToken     string            `protobuf:"bytes,40,opt,name=stable_token,json=stableToken,proto3" json:"stable_token,omitempty"`               //计价稳定币
	Total           float64           `protobuf:"fixed64,41,opt,name=total,proto3" json:"total,omitempty"`                                            //杠杆区总资本金，以稳定币计价
	TotalMargin     float64           `protobuf:"fixed64,42,opt,name=total_margin,json=totalMargin,proto3" json:"total_margin,omitempty"`             //统一账户下，总保证金/权益，以稳定币计价
}

func (x *BalanceMargin) Reset() {
	*x = BalanceMargin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balance_balance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceMargin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceMargin) ProtoMessage() {}

func (x *BalanceMargin) ProtoReflect() protoreflect.Message {
	mi := &file_balance_balance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceMargin.ProtoReflect.Descriptor instead.
func (*BalanceMargin) Descriptor() ([]byte, []int) {
	return file_balance_balance_proto_rawDescGZIP(), []int{1}
}

func (x *BalanceMargin) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *BalanceMargin) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BalanceMargin) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *BalanceMargin) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *BalanceMargin) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *BalanceMargin) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BalanceMargin) GetUniAccount() bool {
	if x != nil {
		return x.UniAccount
	}
	return false
}

func (x *BalanceMargin) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *BalanceMargin) GetFrozen() float64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *BalanceMargin) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *BalanceMargin) GetActualAvailable() float64 {
	if x != nil {
		return x.ActualAvailable
	}
	return 0
}

func (x *BalanceMargin) GetReserved() float64 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *BalanceMargin) GetLoan() float64 {
	if x != nil {
		return x.Loan
	}
	return 0
}

func (x *BalanceMargin) GetLoanAvailable() float64 {
	if x != nil {
		return x.LoanAvailable
	}
	return 0
}

func (x *BalanceMargin) GetMarginRate() float64 {
	if x != nil {
		return x.MarginRate
	}
	return 0
}

func (x *BalanceMargin) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *BalanceMargin) GetProjectRisk() float64 {
	if x != nil {
		return x.ProjectRisk
	}
	return 0
}

func (x *BalanceMargin) GetAccountRisk() float64 {
	if x != nil {
		return x.AccountRisk
	}
	return 0
}

func (x *BalanceMargin) GetMarginRisk() float64 {
	if x != nil {
		return x.MarginRisk
	}
	return 0
}

func (x *BalanceMargin) GetUpdateTs() int64 {
	if x != nil {
		return x.UpdateTs
	}
	return 0
}

func (x *BalanceMargin) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *BalanceMargin) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *BalanceMargin) GetStableToken() string {
	if x != nil {
		return x.StableToken
	}
	return ""
}

func (x *BalanceMargin) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BalanceMargin) GetTotalMargin() float64 {
	if x != nil {
		return x.TotalMargin
	}
	return 0
}

type CapitalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capital         float64 `protobuf:"fixed64,1,opt,name=capital,proto3" json:"capital,omitempty"`                                        //资本量
	CapitalUsed     float64 `protobuf:"fixed64,2,opt,name=capital_used,json=capitalUsed,proto3" json:"capital_used,omitempty"`             //已用于合约的资本量
	CapitalFrozen   float64 `protobuf:"fixed64,3,opt,name=capital_frozen,json=capitalFrozen,proto3" json:"capital_frozen,omitempty"`       //开仓过程中临时冻结的资本量
	CapitalAvail    float64 `protobuf:"fixed64,4,opt,name=capital_avail,json=capitalAvail,proto3" json:"capital_avail,omitempty"`          //可用资本量			CapitalAvail = Capital - CapitalUsed
	CapitalActual   float64 `protobuf:"fixed64,5,opt,name=capital_actual,json=capitalActual,proto3" json:"capital_actual,omitempty"`       //实际可用资本量		CapitalActual = CapitalAvail - CapitalReserved
	CapitalReserved float64 `protobuf:"fixed64,6,opt,name=capital_reserved,json=capitalReserved,proto3" json:"capital_reserved,omitempty"` //预保留资本量，为预期对冲单锁定的资本
	CapitalRight    float64 `protobuf:"fixed64,7,opt,name=capital_right,json=capitalRight,proto3" json:"capital_right,omitempty"`          //总权益
	CapitalRisk     float64 `protobuf:"fixed64,8,opt,name=capital_risk,json=capitalRisk,proto3" json:"capital_risk,omitempty"`             //总风险
	IsStable        bool    `protobuf:"varint,9,opt,name=is_stable,json=isStable,proto3" json:"is_stable,omitempty"`                       //是否稳定币
}

func (x *CapitalInfo) Reset() {
	*x = CapitalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balance_balance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapitalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapitalInfo) ProtoMessage() {}

func (x *CapitalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_balance_balance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapitalInfo.ProtoReflect.Descriptor instead.
func (*CapitalInfo) Descriptor() ([]byte, []int) {
	return file_balance_balance_proto_rawDescGZIP(), []int{2}
}

func (x *CapitalInfo) GetCapital() float64 {
	if x != nil {
		return x.Capital
	}
	return 0
}

func (x *CapitalInfo) GetCapitalUsed() float64 {
	if x != nil {
		return x.CapitalUsed
	}
	return 0
}

func (x *CapitalInfo) GetCapitalFrozen() float64 {
	if x != nil {
		return x.CapitalFrozen
	}
	return 0
}

func (x *CapitalInfo) GetCapitalAvail() float64 {
	if x != nil {
		return x.CapitalAvail
	}
	return 0
}

func (x *CapitalInfo) GetCapitalActual() float64 {
	if x != nil {
		return x.CapitalActual
	}
	return 0
}

func (x *CapitalInfo) GetCapitalReserved() float64 {
	if x != nil {
		return x.CapitalReserved
	}
	return 0
}

func (x *CapitalInfo) GetCapitalRight() float64 {
	if x != nil {
		return x.CapitalRight
	}
	return 0
}

func (x *CapitalInfo) GetCapitalRisk() float64 {
	if x != nil {
		return x.CapitalRisk
	}
	return 0
}

func (x *CapitalInfo) GetIsStable() bool {
	if x != nil {
		return x.IsStable
	}
	return false
}

type ContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractType   common.SymbolType `protobuf:"varint,1,opt,name=contract_type,json=contractType,proto3,enum=SymbolType" json:"contract_type,omitempty"` //合约类型列表
	ContractAmount float64           `protobuf:"fixed64,2,opt,name=contract_amount,json=contractAmount,proto3" json:"contract_amount,omitempty"`          //合约量，如果是币本位，则是合约张数，面额：btc 100美元/张，其它币10美元/张；如果是quote币本位，则是参与合约交易的基本币合约张数，面额与币种挂钩
	Frozen         float64           `protobuf:"fixed64,3,opt,name=frozen,proto3" json:"frozen,omitempty"`                                                //对应于每个合约类型的平仓临时冻结仓位
	Available      float64           `protobuf:"fixed64,4,opt,name=available,proto3" json:"available,omitempty"`                                          //对应于每个合约类型的可用仓位				available = amount - reserved
	Reserved       float64           `protobuf:"fixed64,5,opt,name=reserved,proto3" json:"reserved,omitempty"`                                            //对应于每个合约类型的保留仓位，为预期对冲单锁定的仓位
	Value          float64           `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`                                                  //对应于每个合约类型的仓位保证金，单位取决于是否quote币本位
	HoldingPrice   float64           `protobuf:"fixed64,7,opt,name=holding_price,json=holdingPrice,proto3" json:"holding_price,omitempty"`                //对应于每个合约类型的仓位持仓价格
	Profit         float64           `protobuf:"fixed64,8,opt,name=profit,proto3" json:"profit,omitempty"`                                                //对应于每个合约类型的仓位已实现利润，单位取决于是否quote币本位
	Unprofit       float64           `protobuf:"fixed64,9,opt,name=unprofit,proto3" json:"unprofit,omitempty"`                                            //对应于每个合约类型的仓位未实现利润，单位取决于是否quote币本位
}

func (x *ContractInfo) Reset() {
	*x = ContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balance_balance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfo) ProtoMessage() {}

func (x *ContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_balance_balance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfo.ProtoReflect.Descriptor instead.
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return file_balance_balance_proto_rawDescGZIP(), []int{3}
}

func (x *ContractInfo) GetContractType() common.SymbolType {
	if x != nil {
		return x.ContractType
	}
	return common.SymbolType(0)
}

func (x *ContractInfo) GetContractAmount() float64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *ContractInfo) GetFrozen() float64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *ContractInfo) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *ContractInfo) GetReserved() float64 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *ContractInfo) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ContractInfo) GetHoldingPrice() float64 {
	if x != nil {
		return x.HoldingPrice
	}
	return 0
}

func (x *ContractInfo) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *ContractInfo) GetUnprofit() float64 {
	if x != nil {
		return x.Unprofit
	}
	return 0
}

type FutureTokenStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount            float64         `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`                                                   //基本币量
	Used              float64         `protobuf:"fixed64,5,opt,name=used,proto3" json:"used,omitempty"`                                                       //已用于合约的量
	Available         float64         `protobuf:"fixed64,6,opt,name=available,proto3" json:"available,omitempty"`                                             //可用量
	TokenQuote        string          `protobuf:"bytes,7,opt,name=token_quote,json=tokenQuote,proto3" json:"token_quote,omitempty"`                           //quote币种
	AmountQuote       float64         `protobuf:"fixed64,8,opt,name=amount_quote,json=amountQuote,proto3" json:"amount_quote,omitempty"`                      //quote币的量
	Profit            float64         `protobuf:"fixed64,9,opt,name=profit,proto3" json:"profit,omitempty"`                                                   //已实现利润，单位取决于是否quote币本位
	Unprofit          float64         `protobuf:"fixed64,10,opt,name=unprofit,proto3" json:"unprofit,omitempty"`                                              //未实现利润，单位取决于是否quote币本位
	Right             float64         `protobuf:"fixed64,11,opt,name=right,proto3" json:"right,omitempty"`                                                    //总权益，单位取决于是否quote币本位
	Risk              float64         `protobuf:"fixed64,12,opt,name=risk,proto3" json:"risk,omitempty"`                                                      //风险率
	StandardQuote     bool            `protobuf:"varint,15,opt,name=standard_quote,json=standardQuote,proto3" json:"standard_quote,omitempty"`                //是否quote币本位，目前quote币种为稳定币
	AmountFrozen      float64         `protobuf:"fixed64,16,opt,name=amount_frozen,json=amountFrozen,proto3" json:"amount_frozen,omitempty"`                  //合约中涉及的基本币的量，如是负数意味着做空，否则为做多
	AmountQuoteFrozen float64         `protobuf:"fixed64,17,opt,name=amount_quote_frozen,json=amountQuoteFrozen,proto3" json:"amount_quote_frozen,omitempty"` //合约中涉及的quote币的量，符号与amount相反
	Long              []*ContractInfo `protobuf:"bytes,20,rep,name=long,proto3" json:"long,omitempty"`                                                        // 多仓
	Short             []*ContractInfo `protobuf:"bytes,21,rep,name=short,proto3" json:"short,omitempty"`                                                      // 空仓
}

func (x *FutureTokenStatus) Reset() {
	*x = FutureTokenStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balance_balance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureTokenStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureTokenStatus) ProtoMessage() {}

func (x *FutureTokenStatus) ProtoReflect() protoreflect.Message {
	mi := &file_balance_balance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureTokenStatus.ProtoReflect.Descriptor instead.
func (*FutureTokenStatus) Descriptor() ([]byte, []int) {
	return file_balance_balance_proto_rawDescGZIP(), []int{4}
}

func (x *FutureTokenStatus) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FutureTokenStatus) GetUsed() float64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *FutureTokenStatus) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *FutureTokenStatus) GetTokenQuote() string {
	if x != nil {
		return x.TokenQuote
	}
	return ""
}

func (x *FutureTokenStatus) GetAmountQuote() float64 {
	if x != nil {
		return x.AmountQuote
	}
	return 0
}

func (x *FutureTokenStatus) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *FutureTokenStatus) GetUnprofit() float64 {
	if x != nil {
		return x.Unprofit
	}
	return 0
}

func (x *FutureTokenStatus) GetRight() float64 {
	if x != nil {
		return x.Right
	}
	return 0
}

func (x *FutureTokenStatus) GetRisk() float64 {
	if x != nil {
		return x.Risk
	}
	return 0
}

func (x *FutureTokenStatus) GetStandardQuote() bool {
	if x != nil {
		return x.StandardQuote
	}
	return false
}

func (x *FutureTokenStatus) GetAmountFrozen() float64 {
	if x != nil {
		return x.AmountFrozen
	}
	return 0
}

func (x *FutureTokenStatus) GetAmountQuoteFrozen() float64 {
	if x != nil {
		return x.AmountQuoteFrozen
	}
	return 0
}

func (x *FutureTokenStatus) GetLong() []*ContractInfo {
	if x != nil {
		return x.Long
	}
	return nil
}

func (x *FutureTokenStatus) GetShort() []*ContractInfo {
	if x != nil {
		return x.Short
	}
	return nil
}

type BalanceFuture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr         *common.MsgHeader    `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	ProjectId   string               `protobuf:"bytes,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AccountId   []byte               `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`          //账户代码
	Exchange    common.Exchange      `protobuf:"varint,7,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"`              //所属交易所代码
	Market      common.Market        `protobuf:"varint,8,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                    //所属交易区
	UniAccount  bool                 `protobuf:"varint,9,opt,name=uni_account,json=uniAccount,proto3" json:"uni_account,omitempty"`      //是否全仓模式
	LeverRate   float64              `protobuf:"fixed64,10,opt,name=lever_rate,json=leverRate,proto3" json:"lever_rate,omitempty"`       //杠杆率
	Token       string               `protobuf:"bytes,15,opt,name=token,proto3" json:"token,omitempty"`                                  //基本币
	Capital     *CapitalInfo         `protobuf:"bytes,16,opt,name=capital,proto3" json:"capital,omitempty"`                              //对应基本币的资本状况
	BalanceCoin []*FutureTokenStatus `protobuf:"bytes,17,rep,name=balance_coin,json=balanceCoin,proto3" json:"balance_coin,omitempty"`   //单币种的币本位（基本币本位）合约列表，每一项对应于不同quote币的合约
	BalanceU    []*FutureTokenStatus `protobuf:"bytes,18,rep,name=balance_u,json=balanceU,proto3" json:"balance_u,omitempty"`            //单币种的U本位（quote币本位）合约列表，每一项对应于不同quote币的合约
	ProjectRisk float64              `protobuf:"fixed64,20,opt,name=project_risk,json=projectRisk,proto3" json:"project_risk,omitempty"` //项目风险率
	AccountRisk float64              `protobuf:"fixed64,21,opt,name=account_risk,json=accountRisk,proto3" json:"account_risk,omitempty"` //账户风险率
	FutureRisk  float64              `protobuf:"fixed64,22,opt,name=future_risk,json=futureRisk,proto3" json:"future_risk,omitempty"`    //账户风险率
	StableToken string               `protobuf:"bytes,23,opt,name=stable_token,json=stableToken,proto3" json:"stable_token,omitempty"`   //计价稳定币
	TotalMargin float64              `protobuf:"fixed64,24,opt,name=total_margin,json=totalMargin,proto3" json:"total_margin,omitempty"` //总保证金/权益，以稳定币计价
	PreferToken string               `protobuf:"bytes,25,opt,name=prefer_token,json=preferToken,proto3" json:"prefer_token,omitempty"`   //计价币（非计价稳定币，某些交易所用于币本位的全仓模式或统一账户模式计价）
	TokenMargin float64              `protobuf:"fixed64,26,opt,name=token_margin,json=tokenMargin,proto3" json:"token_margin,omitempty"` //总保证金/权益，以计价币计价
	UpdateTs    int64                `protobuf:"varint,30,opt,name=update_ts,json=updateTs,proto3" json:"update_ts,omitempty"`           //最近更新的时间，timestamp
	OrderId     int64                `protobuf:"varint,31,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`              //订单编号，-1表示更新来源非订单，此时OrderStatus无效
	OrderStatus int32                `protobuf:"varint,32,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`  //订单状态编号，-1时为首次下单
}

func (x *BalanceFuture) Reset() {
	*x = BalanceFuture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_balance_balance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceFuture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceFuture) ProtoMessage() {}

func (x *BalanceFuture) ProtoReflect() protoreflect.Message {
	mi := &file_balance_balance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceFuture.ProtoReflect.Descriptor instead.
func (*BalanceFuture) Descriptor() ([]byte, []int) {
	return file_balance_balance_proto_rawDescGZIP(), []int{5}
}

func (x *BalanceFuture) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *BalanceFuture) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BalanceFuture) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *BalanceFuture) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *BalanceFuture) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *BalanceFuture) GetUniAccount() bool {
	if x != nil {
		return x.UniAccount
	}
	return false
}

func (x *BalanceFuture) GetLeverRate() float64 {
	if x != nil {
		return x.LeverRate
	}
	return 0
}

func (x *BalanceFuture) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BalanceFuture) GetCapital() *CapitalInfo {
	if x != nil {
		return x.Capital
	}
	return nil
}

func (x *BalanceFuture) GetBalanceCoin() []*FutureTokenStatus {
	if x != nil {
		return x.BalanceCoin
	}
	return nil
}

func (x *BalanceFuture) GetBalanceU() []*FutureTokenStatus {
	if x != nil {
		return x.BalanceU
	}
	return nil
}

func (x *BalanceFuture) GetProjectRisk() float64 {
	if x != nil {
		return x.ProjectRisk
	}
	return 0
}

func (x *BalanceFuture) GetAccountRisk() float64 {
	if x != nil {
		return x.AccountRisk
	}
	return 0
}

func (x *BalanceFuture) GetFutureRisk() float64 {
	if x != nil {
		return x.FutureRisk
	}
	return 0
}

func (x *BalanceFuture) GetStableToken() string {
	if x != nil {
		return x.StableToken
	}
	return ""
}

func (x *BalanceFuture) GetTotalMargin() float64 {
	if x != nil {
		return x.TotalMargin
	}
	return 0
}

func (x *BalanceFuture) GetPreferToken() string {
	if x != nil {
		return x.PreferToken
	}
	return ""
}

func (x *BalanceFuture) GetTokenMargin() float64 {
	if x != nil {
		return x.TokenMargin
	}
	return 0
}

func (x *BalanceFuture) GetUpdateTs() int64 {
	if x != nil {
		return x.UpdateTs
	}
	return 0
}

func (x *BalanceFuture) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *BalanceFuture) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

var File_balance_balance_proto protoreflect.FileDescriptor

var file_balance_balance_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x05, 0x0a, 0x0b, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x95, 0x06, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68,
	0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x6e,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0xcd, 0x02, 0x0a, 0x0b, 0x43,
	0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75,
	0x6e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0xd3, 0x03, 0x0a, 0x11, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67,
	0x12, 0x2b, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x22, 0xff, 0x05,
	0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d,
	0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x75, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x55, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x42, 0x0a, 0x18, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5a, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_balance_balance_proto_rawDescOnce sync.Once
	file_balance_balance_proto_rawDescData = file_balance_balance_proto_rawDesc
)

func file_balance_balance_proto_rawDescGZIP() []byte {
	file_balance_balance_proto_rawDescOnce.Do(func() {
		file_balance_balance_proto_rawDescData = protoimpl.X.CompressGZIP(file_balance_balance_proto_rawDescData)
	})
	return file_balance_balance_proto_rawDescData
}

var file_balance_balance_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_balance_balance_proto_goTypes = []interface{}{
	(*BalanceSpot)(nil),       // 0: balance.BalanceSpot
	(*BalanceMargin)(nil),     // 1: balance.BalanceMargin
	(*CapitalInfo)(nil),       // 2: balance.CapitalInfo
	(*ContractInfo)(nil),      // 3: balance.ContractInfo
	(*FutureTokenStatus)(nil), // 4: balance.FutureTokenStatus
	(*BalanceFuture)(nil),     // 5: balance.BalanceFuture
	(*common.MsgHeader)(nil),  // 6: MsgHeader
	(common.Exchange)(0),      // 7: Exchange
	(common.Market)(0),        // 8: Market
	(common.SymbolType)(0),    // 9: SymbolType
}
var file_balance_balance_proto_depIdxs = []int32{
	6,  // 0: balance.BalanceSpot.hdr:type_name -> MsgHeader
	7,  // 1: balance.BalanceSpot.exchange:type_name -> Exchange
	8,  // 2: balance.BalanceSpot.market:type_name -> Market
	6,  // 3: balance.BalanceMargin.hdr:type_name -> MsgHeader
	7,  // 4: balance.BalanceMargin.exchange:type_name -> Exchange
	8,  // 5: balance.BalanceMargin.market:type_name -> Market
	9,  // 6: balance.ContractInfo.contract_type:type_name -> SymbolType
	3,  // 7: balance.FutureTokenStatus.long:type_name -> balance.ContractInfo
	3,  // 8: balance.FutureTokenStatus.short:type_name -> balance.ContractInfo
	6,  // 9: balance.BalanceFuture.hdr:type_name -> MsgHeader
	7,  // 10: balance.BalanceFuture.exchange:type_name -> Exchange
	8,  // 11: balance.BalanceFuture.market:type_name -> Market
	2,  // 12: balance.BalanceFuture.capital:type_name -> balance.CapitalInfo
	4,  // 13: balance.BalanceFuture.balance_coin:type_name -> balance.FutureTokenStatus
	4,  // 14: balance.BalanceFuture.balance_u:type_name -> balance.FutureTokenStatus
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_balance_balance_proto_init() }
func file_balance_balance_proto_init() {
	if File_balance_balance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_balance_balance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceSpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balance_balance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceMargin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balance_balance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapitalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balance_balance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balance_balance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureTokenStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_balance_balance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceFuture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_balance_balance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_balance_balance_proto_goTypes,
		DependencyIndexes: file_balance_balance_proto_depIdxs,
		MessageInfos:      file_balance_balance_proto_msgTypes,
	}.Build()
	File_balance_balance_proto = out.File
	file_balance_balance_proto_rawDesc = nil
	file_balance_balance_proto_goTypes = nil
	file_balance_balance_proto_depIdxs = nil
}
