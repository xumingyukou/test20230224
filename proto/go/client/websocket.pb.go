// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: client/websocket.proto

package client

import (
	common "github.com/warmplanet/proto/go/common"
	depth "github.com/warmplanet/proto/go/depth"
	order "github.com/warmplanet/proto/go/order"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BalanceChangeType int32

const (
	BalanceChangeType_CHANGE_INVALID               BalanceChangeType = 0
	BalanceChangeType_CHANGE_EXERCISED             BalanceChangeType = 1  //行权
	BalanceChangeType_CHANGE_TRANSFERRED           BalanceChangeType = 2  //划转
	BalanceChangeType_CHANGE_FILLED                BalanceChangeType = 3  //成交
	BalanceChangeType_CHANGE_LIQUIDATION           BalanceChangeType = 4  //强平
	BalanceChangeType_CHANGE_CLAW_BACK             BalanceChangeType = 5  //穿仓补偿
	BalanceChangeType_CHANGE_ADL                   BalanceChangeType = 6  //ADL自动减仓
	BalanceChangeType_CHANGE_FUNDING_FEE           BalanceChangeType = 7  //资金费
	BalanceChangeType_CHANGE_ADJUST_MARGIN         BalanceChangeType = 8  //调整保证金
	BalanceChangeType_CHANGE_SET_LEVERAGE          BalanceChangeType = 9  //设置杠杆
	BalanceChangeType_CHANGE_INTEREST_DEDUCTION    BalanceChangeType = 10 //扣息
	BalanceChangeType_CHANGE_DELIVERED             BalanceChangeType = 11 //交割
	BalanceChangeType_CHANGE_DEPOSIT               BalanceChangeType = 12
	BalanceChangeType_CHANGE_WITHDRAW              BalanceChangeType = 13
	BalanceChangeType_CHANGE_ORDER                 BalanceChangeType = 14
	BalanceChangeType_CHANGE_WITHDRAW_REJECT       BalanceChangeType = 15
	BalanceChangeType_CHANGE_ADJUSTMENT            BalanceChangeType = 16
	BalanceChangeType_CHANGE_INSURANCE_CLEAR       BalanceChangeType = 17
	BalanceChangeType_CHANGE_ADMIN_DEPOSIT         BalanceChangeType = 18
	BalanceChangeType_CHANGE_ADMIN_WITHDRAW        BalanceChangeType = 19
	BalanceChangeType_CHANGE_MARGIN_TRANSFER       BalanceChangeType = 20
	BalanceChangeType_CHANGE_MARGIN_TYPE_CHANGE    BalanceChangeType = 21
	BalanceChangeType_CHANGE_ASSET_TRANSFER        BalanceChangeType = 22
	BalanceChangeType_CHANGE_OPTIONS_PREMIUM_FEE   BalanceChangeType = 23
	BalanceChangeType_CHANGE_OPTIONS_SETTLE_PROFIT BalanceChangeType = 24
	BalanceChangeType_CHANGE_AUTO_EXCHANGE         BalanceChangeType = 25
)

// Enum value maps for BalanceChangeType.
var (
	BalanceChangeType_name = map[int32]string{
		0:  "CHANGE_INVALID",
		1:  "CHANGE_EXERCISED",
		2:  "CHANGE_TRANSFERRED",
		3:  "CHANGE_FILLED",
		4:  "CHANGE_LIQUIDATION",
		5:  "CHANGE_CLAW_BACK",
		6:  "CHANGE_ADL",
		7:  "CHANGE_FUNDING_FEE",
		8:  "CHANGE_ADJUST_MARGIN",
		9:  "CHANGE_SET_LEVERAGE",
		10: "CHANGE_INTEREST_DEDUCTION",
		11: "CHANGE_DELIVERED",
		12: "CHANGE_DEPOSIT",
		13: "CHANGE_WITHDRAW",
		14: "CHANGE_ORDER",
		15: "CHANGE_WITHDRAW_REJECT",
		16: "CHANGE_ADJUSTMENT",
		17: "CHANGE_INSURANCE_CLEAR",
		18: "CHANGE_ADMIN_DEPOSIT",
		19: "CHANGE_ADMIN_WITHDRAW",
		20: "CHANGE_MARGIN_TRANSFER",
		21: "CHANGE_MARGIN_TYPE_CHANGE",
		22: "CHANGE_ASSET_TRANSFER",
		23: "CHANGE_OPTIONS_PREMIUM_FEE",
		24: "CHANGE_OPTIONS_SETTLE_PROFIT",
		25: "CHANGE_AUTO_EXCHANGE",
	}
	BalanceChangeType_value = map[string]int32{
		"CHANGE_INVALID":               0,
		"CHANGE_EXERCISED":             1,
		"CHANGE_TRANSFERRED":           2,
		"CHANGE_FILLED":                3,
		"CHANGE_LIQUIDATION":           4,
		"CHANGE_CLAW_BACK":             5,
		"CHANGE_ADL":                   6,
		"CHANGE_FUNDING_FEE":           7,
		"CHANGE_ADJUST_MARGIN":         8,
		"CHANGE_SET_LEVERAGE":          9,
		"CHANGE_INTEREST_DEDUCTION":    10,
		"CHANGE_DELIVERED":             11,
		"CHANGE_DEPOSIT":               12,
		"CHANGE_WITHDRAW":              13,
		"CHANGE_ORDER":                 14,
		"CHANGE_WITHDRAW_REJECT":       15,
		"CHANGE_ADJUSTMENT":            16,
		"CHANGE_INSURANCE_CLEAR":       17,
		"CHANGE_ADMIN_DEPOSIT":         18,
		"CHANGE_ADMIN_WITHDRAW":        19,
		"CHANGE_MARGIN_TRANSFER":       20,
		"CHANGE_MARGIN_TYPE_CHANGE":    21,
		"CHANGE_ASSET_TRANSFER":        22,
		"CHANGE_OPTIONS_PREMIUM_FEE":   23,
		"CHANGE_OPTIONS_SETTLE_PROFIT": 24,
		"CHANGE_AUTO_EXCHANGE":         25,
	}
)

func (x BalanceChangeType) Enum() *BalanceChangeType {
	p := new(BalanceChangeType)
	*p = x
	return p
}

func (x BalanceChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_websocket_proto_enumTypes[0].Descriptor()
}

func (BalanceChangeType) Type() protoreflect.EnumType {
	return &file_client_websocket_proto_enumTypes[0]
}

func (x BalanceChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceChangeType.Descriptor instead.
func (BalanceChangeType) EnumDescriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{0}
}

type WsFundingRateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr          *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Symbol       string            `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` // 交易对
	Type         common.SymbolType `protobuf:"varint,3,opt,name=type,proto3,enum=SymbolType" json:"type,omitempty"`
	FundingRate  float64           `protobuf:"fixed64,4,opt,name=funding_rate,json=fundingRate,proto3" json:"funding_rate,omitempty"`   // 资金费率
	ReceiveTime  int64             `protobuf:"varint,5,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`    // 接收时间  microsecond
	ExchangeTime int64             `protobuf:"varint,6,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"` // 事件时间 microsecond
}

func (x *WsFundingRateRsp) Reset() {
	*x = WsFundingRateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsFundingRateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsFundingRateRsp) ProtoMessage() {}

func (x *WsFundingRateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsFundingRateRsp.ProtoReflect.Descriptor instead.
func (*WsFundingRateRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{0}
}

func (x *WsFundingRateRsp) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *WsFundingRateRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *WsFundingRateRsp) GetType() common.SymbolType {
	if x != nil {
		return x.Type
	}
	return common.SymbolType(0)
}

func (x *WsFundingRateRsp) GetFundingRate() float64 {
	if x != nil {
		return x.FundingRate
	}
	return 0
}

func (x *WsFundingRateRsp) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *WsFundingRateRsp) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

type WsAggTradeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggId        string          `protobuf:"bytes,1,opt,name=agg_id,json=aggId,proto3" json:"agg_id,omitempty"`                                   // 归集ID
	Symbol       string          `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                              // 交易对
	ExchangeTime int64           `protobuf:"varint,3,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"`             // 事件时间 microsecond
	Price        float64         `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                                              // 成交价格
	Amount       float64         `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                                            // 成交数量
	TakerSide    order.TradeSide `protobuf:"varint,6,opt,name=taker_side,json=takerSide,proto3,enum=order.TradeSide" json:"taker_side,omitempty"` // 成交方向：如sell，则此次成交是一个主动卖出单，否则是一个主动买入单
	DealTime     int64           `protobuf:"varint,9,opt,name=deal_time,json=dealTime,proto3" json:"deal_time,omitempty"`                         // 成交时间 microsecond
	ReceiveTime  int64           `protobuf:"varint,10,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`               // 接收时间 microsecond
}

func (x *WsAggTradeRsp) Reset() {
	*x = WsAggTradeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsAggTradeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsAggTradeRsp) ProtoMessage() {}

func (x *WsAggTradeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsAggTradeRsp.ProtoReflect.Descriptor instead.
func (*WsAggTradeRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{1}
}

func (x *WsAggTradeRsp) GetAggId() string {
	if x != nil {
		return x.AggId
	}
	return ""
}

func (x *WsAggTradeRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *WsAggTradeRsp) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *WsAggTradeRsp) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *WsAggTradeRsp) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WsAggTradeRsp) GetTakerSide() order.TradeSide {
	if x != nil {
		return x.TakerSide
	}
	return order.TradeSide(0)
}

func (x *WsAggTradeRsp) GetDealTime() int64 {
	if x != nil {
		return x.DealTime
	}
	return 0
}

func (x *WsAggTradeRsp) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

type WsTradeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr           *common.MsgHeader `protobuf:"bytes,11,opt,name=hdr,proto3" json:"hdr,omitempty"`
	OrderId       string            `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                             // 交易ID
	Symbol        string            `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                              // 交易对
	ExchangeTime  int64             `protobuf:"varint,3,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"`             // 事件时间 microsecond
	Price         float64           `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                                              // 成交价格
	Amount        float64           `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                                            // 成交数量
	TakerSide     order.TradeSide   `protobuf:"varint,6,opt,name=taker_side,json=takerSide,proto3,enum=order.TradeSide" json:"taker_side,omitempty"` // taker主动成交方向：如sell，则此次成交是一个主动卖出单，否则是一个主动买入单
	BuyerOrderId  string            `protobuf:"bytes,7,opt,name=buyer_order_id,json=buyerOrderId,proto3" json:"buyer_order_id,omitempty"`            // 买方的订单ID
	SellerOrderId string            `protobuf:"bytes,8,opt,name=seller_order_id,json=sellerOrderId,proto3" json:"seller_order_id,omitempty"`         // 卖方的订单ID
	DealTime      int64             `protobuf:"varint,9,opt,name=deal_time,json=dealTime,proto3" json:"deal_time,omitempty"`                         // 成交时间 microsecond
	ReceiveTime   int64             `protobuf:"varint,10,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`               // 接收时间 microsecond
}

func (x *WsTradeRsp) Reset() {
	*x = WsTradeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsTradeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsTradeRsp) ProtoMessage() {}

func (x *WsTradeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsTradeRsp.ProtoReflect.Descriptor instead.
func (*WsTradeRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{2}
}

func (x *WsTradeRsp) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *WsTradeRsp) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *WsTradeRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *WsTradeRsp) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *WsTradeRsp) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *WsTradeRsp) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WsTradeRsp) GetTakerSide() order.TradeSide {
	if x != nil {
		return x.TakerSide
	}
	return order.TradeSide(0)
}

func (x *WsTradeRsp) GetBuyerOrderId() string {
	if x != nil {
		return x.BuyerOrderId
	}
	return ""
}

func (x *WsTradeRsp) GetSellerOrderId() string {
	if x != nil {
		return x.SellerOrderId
	}
	return ""
}

func (x *WsTradeRsp) GetDealTime() int64 {
	if x != nil {
		return x.DealTime
	}
	return 0
}

func (x *WsTradeRsp) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

type WsBookTickerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr           *common.MsgHeader `protobuf:"bytes,7,opt,name=hdr,proto3" json:"hdr,omitempty"`
	UpdateIdStart int64             `protobuf:"varint,1,opt,name=update_id_start,json=updateIdStart,proto3" json:"update_id_start,omitempty"`
	UpdateIdEnd   int64             `protobuf:"varint,2,opt,name=update_id_end,json=updateIdEnd,proto3" json:"update_id_end,omitempty"`
	ExchangeTime  int64             `protobuf:"varint,3,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"` // microsecond
	ReceiveTime   int64             `protobuf:"varint,10,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`   // 接收时间 microsecond
	Symbol        string            `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Ask           *depth.DepthLevel `protobuf:"bytes,5,opt,name=ask,proto3" json:"ask,omitempty"`
	Bid           *depth.DepthLevel `protobuf:"bytes,6,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *WsBookTickerRsp) Reset() {
	*x = WsBookTickerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsBookTickerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsBookTickerRsp) ProtoMessage() {}

func (x *WsBookTickerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsBookTickerRsp.ProtoReflect.Descriptor instead.
func (*WsBookTickerRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{3}
}

func (x *WsBookTickerRsp) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *WsBookTickerRsp) GetUpdateIdStart() int64 {
	if x != nil {
		return x.UpdateIdStart
	}
	return 0
}

func (x *WsBookTickerRsp) GetUpdateIdEnd() int64 {
	if x != nil {
		return x.UpdateIdEnd
	}
	return 0
}

func (x *WsBookTickerRsp) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *WsBookTickerRsp) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *WsBookTickerRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *WsBookTickerRsp) GetAsk() *depth.DepthLevel {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *WsBookTickerRsp) GetBid() *depth.DepthLevel {
	if x != nil {
		return x.Bid
	}
	return nil
}

type WsDepthRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr           *common.MsgHeader   `protobuf:"bytes,7,opt,name=hdr,proto3" json:"hdr,omitempty"`
	UpdateIdStart int64               `protobuf:"varint,1,opt,name=update_id_start,json=updateIdStart,proto3" json:"update_id_start,omitempty"`
	UpdateIdEnd   int64               `protobuf:"varint,2,opt,name=update_id_end,json=updateIdEnd,proto3" json:"update_id_end,omitempty"`
	ExchangeTime  int64               `protobuf:"varint,3,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"` // microsecond
	ReceiveTime   int64               `protobuf:"varint,10,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`   // 接收时间 microsecond
	Symbol        string              `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Asks          []*depth.DepthLevel `protobuf:"bytes,5,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids          []*depth.DepthLevel `protobuf:"bytes,6,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (x *WsDepthRsp) Reset() {
	*x = WsDepthRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsDepthRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsDepthRsp) ProtoMessage() {}

func (x *WsDepthRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsDepthRsp.ProtoReflect.Descriptor instead.
func (*WsDepthRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{4}
}

func (x *WsDepthRsp) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *WsDepthRsp) GetUpdateIdStart() int64 {
	if x != nil {
		return x.UpdateIdStart
	}
	return 0
}

func (x *WsDepthRsp) GetUpdateIdEnd() int64 {
	if x != nil {
		return x.UpdateIdEnd
	}
	return 0
}

func (x *WsDepthRsp) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *WsDepthRsp) GetReceiveTime() int64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *WsDepthRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *WsDepthRsp) GetAsks() []*depth.DepthLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *WsDepthRsp) GetBids() []*depth.DepthLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

type WsAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr       *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Exchange  common.Exchange   `protobuf:"varint,7,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"` //订单所在交易所，DEX的各种swap Dapp也通过本字段区分
	Market    common.Market     `protobuf:"varint,13,opt,name=market,proto3,enum=Market" json:"market,omitempty"`      // 交易区，分spot margin杠杆区 期货 永续 期权等
	Type      common.SymbolType `protobuf:"varint,14,opt,name=type,proto3,enum=SymbolType" json:"type,omitempty"`
	AccountId []byte            `protobuf:"bytes,12,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //交易账户，CEX 交易系统据此选择相应账户下的APIKey，一个交易所下的多个交易账户都由交易系统统一管理
	Symbol    string            `protobuf:"bytes,11,opt,name=symbol,proto3" json:"symbol,omitempty"`                        //逐仓
}

func (x *WsAccountReq) Reset() {
	*x = WsAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsAccountReq) ProtoMessage() {}

func (x *WsAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsAccountReq.ProtoReflect.Descriptor instead.
func (*WsAccountReq) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{5}
}

func (x *WsAccountReq) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *WsAccountReq) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *WsAccountReq) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *WsAccountReq) GetType() common.SymbolType {
	if x != nil {
		return x.Type
	}
	return common.SymbolType(0)
}

func (x *WsAccountReq) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *WsAccountReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type BalanceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeTime int64             `protobuf:"varint,1,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"` //变动时间 microsecond
	Market       common.Market     `protobuf:"varint,13,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                    // 交易区，分spot margin杠杆区 期货 永续 期权等
	Assert       string            `protobuf:"bytes,2,opt,name=assert,proto3" json:"assert,omitempty"`                                  // 资产名称
	Available    float64           `protobuf:"fixed64,3,opt,name=available,proto3" json:"available,omitempty"`                          // 可用余额
	Lock         float64           `protobuf:"fixed64,5,opt,name=lock,proto3" json:"lock,omitempty"`                                    // 冻结余额
	ChangeType   BalanceChangeType `protobuf:"varint,7,opt,name=change_type,json=changeType,proto3,enum=client.BalanceChangeType" json:"change_type,omitempty"`
}

func (x *BalanceItem) Reset() {
	*x = BalanceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceItem) ProtoMessage() {}

func (x *BalanceItem) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceItem.ProtoReflect.Descriptor instead.
func (*BalanceItem) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{6}
}

func (x *BalanceItem) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *BalanceItem) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *BalanceItem) GetAssert() string {
	if x != nil {
		return x.Assert
	}
	return ""
}

func (x *BalanceItem) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *BalanceItem) GetLock() float64 {
	if x != nil {
		return x.Lock
	}
	return 0
}

func (x *BalanceItem) GetChangeType() BalanceChangeType {
	if x != nil {
		return x.ChangeType
	}
	return BalanceChangeType_CHANGE_INVALID
}

type PositionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeTime int64             `protobuf:"varint,1,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"` //变动时间  microsecond
	Symbol       string            `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                  // 交易对
	Side         order.TradeSide   `protobuf:"varint,9,opt,name=side,proto3,enum=order.TradeSide" json:"side,omitempty"`                //持仓方向
	Position     float64           `protobuf:"fixed64,8,opt,name=position,proto3" json:"position,omitempty"`                            // 仓位
	Price        float64           `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`                                 // 入仓价格
	Unprofit     float64           `protobuf:"fixed64,5,opt,name=unprofit,proto3" json:"unprofit,omitempty"`                            // 全仓持仓未实现盈亏
	Market       common.Market     `protobuf:"varint,13,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                    // 交易区，分spot margin杠杆区 期货 永续 期权等
	Type         common.SymbolType `protobuf:"varint,14,opt,name=type,proto3,enum=SymbolType" json:"type,omitempty"`
	CloseData    string            `protobuf:"bytes,16,opt,name=close_data,json=closeData,proto3" json:"close_data,omitempty"` // 交割日期，格式0930，永续为空
	ChangeType   BalanceChangeType `protobuf:"varint,7,opt,name=change_type,json=changeType,proto3,enum=client.BalanceChangeType" json:"change_type,omitempty"`
}

func (x *PositionItem) Reset() {
	*x = PositionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionItem) ProtoMessage() {}

func (x *PositionItem) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionItem.ProtoReflect.Descriptor instead.
func (*PositionItem) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{7}
}

func (x *PositionItem) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *PositionItem) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *PositionItem) GetSide() order.TradeSide {
	if x != nil {
		return x.Side
	}
	return order.TradeSide(0)
}

func (x *PositionItem) GetPosition() float64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PositionItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PositionItem) GetUnprofit() float64 {
	if x != nil {
		return x.Unprofit
	}
	return 0
}

func (x *PositionItem) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *PositionItem) GetType() common.SymbolType {
	if x != nil {
		return x.Type
	}
	return common.SymbolType(0)
}

func (x *PositionItem) GetCloseData() string {
	if x != nil {
		return x.CloseData
	}
	return ""
}

func (x *PositionItem) GetChangeType() BalanceChangeType {
	if x != nil {
		return x.ChangeType
	}
	return BalanceChangeType_CHANGE_INVALID
}

type WsAccountRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeTime        int64           `protobuf:"varint,1,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"`                         // microsecond
	UpdateTime          int64           `protobuf:"varint,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                               // microsecond
	TotalAsset          float64         `protobuf:"fixed64,7,opt,name=total_asset,json=totalAsset,proto3" json:"total_asset,omitempty"`                              //总资产=用户总资产+已借
	QuoteAsset          string          `protobuf:"bytes,4,opt,name=quote_asset,json=quoteAsset,proto3" json:"quote_asset,omitempty"`                                // 计价币种
	TotalNetAsset       float64         `protobuf:"fixed64,8,opt,name=total_net_asset,json=totalNetAsset,proto3" json:"total_net_asset,omitempty"`                   //已借
	TotalLiabilityAsset float64         `protobuf:"fixed64,3,opt,name=total_liability_asset,json=totalLiabilityAsset,proto3" json:"total_liability_asset,omitempty"` //用户总资产
	BalanceList         []*BalanceItem  `protobuf:"bytes,11,rep,name=balance_list,json=balanceList,proto3" json:"balance_list,omitempty"`
	PositionList        []*PositionItem `protobuf:"bytes,12,rep,name=position_list,json=positionList,proto3" json:"position_list,omitempty"`
}

func (x *WsAccountRsp) Reset() {
	*x = WsAccountRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsAccountRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsAccountRsp) ProtoMessage() {}

func (x *WsAccountRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsAccountRsp.ProtoReflect.Descriptor instead.
func (*WsAccountRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{8}
}

func (x *WsAccountRsp) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *WsAccountRsp) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *WsAccountRsp) GetTotalAsset() float64 {
	if x != nil {
		return x.TotalAsset
	}
	return 0
}

func (x *WsAccountRsp) GetQuoteAsset() string {
	if x != nil {
		return x.QuoteAsset
	}
	return ""
}

func (x *WsAccountRsp) GetTotalNetAsset() float64 {
	if x != nil {
		return x.TotalNetAsset
	}
	return 0
}

func (x *WsAccountRsp) GetTotalLiabilityAsset() float64 {
	if x != nil {
		return x.TotalLiabilityAsset
	}
	return 0
}

func (x *WsAccountRsp) GetBalanceList() []*BalanceItem {
	if x != nil {
		return x.BalanceList
	}
	return nil
}

func (x *WsAccountRsp) GetPositionList() []*PositionItem {
	if x != nil {
		return x.PositionList
	}
	return nil
}

type WsBalanceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeTime int64         `protobuf:"varint,1,opt,name=exchange_time,json=exchangeTime,proto3" json:"exchange_time,omitempty"` //事件时间 microsecond
	UpdateTime   int64         `protobuf:"varint,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       //变动时间 microsecond
	Assert       string        `protobuf:"bytes,3,opt,name=assert,proto3" json:"assert,omitempty"`                                  // 资产名称
	Delta        float64       `protobuf:"fixed64,4,opt,name=delta,proto3" json:"delta,omitempty"`                                  // 余额变动
	Market       common.Market `protobuf:"varint,13,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                    // 交易区，分spot margin杠杆区 期货 永续 期权等
}

func (x *WsBalanceRsp) Reset() {
	*x = WsBalanceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsBalanceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsBalanceRsp) ProtoMessage() {}

func (x *WsBalanceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsBalanceRsp.ProtoReflect.Descriptor instead.
func (*WsBalanceRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{9}
}

func (x *WsBalanceRsp) GetExchangeTime() int64 {
	if x != nil {
		return x.ExchangeTime
	}
	return 0
}

func (x *WsBalanceRsp) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *WsBalanceRsp) GetAssert() string {
	if x != nil {
		return x.Assert
	}
	return ""
}

func (x *WsBalanceRsp) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *WsBalanceRsp) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

type WsOrderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Producer     []byte                `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer,omitempty"`                         // producer+id唯一标识
	Id           int64                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                    //自维护ID
	IdEx         string                `protobuf:"bytes,3,opt,name=id_ex,json=idEx,proto3" json:"id_ex,omitempty"`                     //由OrderSys下单后得到，如CEX交易所返回提供，或DEX的TxHash
	Status       order.OrderStatusCode `protobuf:"varint,4,opt,name=status,proto3,enum=order.OrderStatusCode" json:"status,omitempty"` // 订单状态
	TimeFilled   int64                 `protobuf:"varint,5,opt,name=time_filled,json=timeFilled,proto3" json:"time_filled,omitempty"`  // 订单成交时间 microsecond
	Symbol       string                `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Market       common.Market         `protobuf:"varint,6,opt,name=market,proto3,enum=Market" json:"market,omitempty"` // 交易区，分spot margin杠杆区 期货 永续 期权等
	Type         common.SymbolType     `protobuf:"varint,7,opt,name=type,proto3,enum=SymbolType" json:"type,omitempty"`
	CloseData    string                `protobuf:"bytes,16,opt,name=close_data,json=closeData,proto3" json:"close_data,omitempty"`            // 交割日期，格式0930，永续为空
	AmountFilled float64               `protobuf:"fixed64,10,opt,name=amount_filled,json=amountFilled,proto3" json:"amount_filled,omitempty"` // 累计成交量
	PriceFilled  float64               `protobuf:"fixed64,11,opt,name=price_filled,json=priceFilled,proto3" json:"price_filled,omitempty"`    // 累计成交均价
	QtyFilled    float64               `protobuf:"fixed64,12,opt,name=qty_filled,json=qtyFilled,proto3" json:"qty_filled,omitempty"`          // 累计成交金额
	FeeAsset     string                `protobuf:"bytes,20,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`               //手续费币种
	Fee          float64               `protobuf:"fixed64,21,opt,name=fee,proto3" json:"fee,omitempty"`                                       //手续费
}

func (x *WsOrderRsp) Reset() {
	*x = WsOrderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_websocket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsOrderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsOrderRsp) ProtoMessage() {}

func (x *WsOrderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_client_websocket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsOrderRsp.ProtoReflect.Descriptor instead.
func (*WsOrderRsp) Descriptor() ([]byte, []int) {
	return file_client_websocket_proto_rawDescGZIP(), []int{10}
}

func (x *WsOrderRsp) GetProducer() []byte {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *WsOrderRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WsOrderRsp) GetIdEx() string {
	if x != nil {
		return x.IdEx
	}
	return ""
}

func (x *WsOrderRsp) GetStatus() order.OrderStatusCode {
	if x != nil {
		return x.Status
	}
	return order.OrderStatusCode(0)
}

func (x *WsOrderRsp) GetTimeFilled() int64 {
	if x != nil {
		return x.TimeFilled
	}
	return 0
}

func (x *WsOrderRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *WsOrderRsp) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *WsOrderRsp) GetType() common.SymbolType {
	if x != nil {
		return x.Type
	}
	return common.SymbolType(0)
}

func (x *WsOrderRsp) GetCloseData() string {
	if x != nil {
		return x.CloseData
	}
	return ""
}

func (x *WsOrderRsp) GetAmountFilled() float64 {
	if x != nil {
		return x.AmountFilled
	}
	return 0
}

func (x *WsOrderRsp) GetPriceFilled() float64 {
	if x != nil {
		return x.PriceFilled
	}
	return 0
}

func (x *WsOrderRsp) GetQtyFilled() float64 {
	if x != nil {
		return x.QtyFilled
	}
	return 0
}

func (x *WsOrderRsp) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

func (x *WsOrderRsp) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

var File_client_websocket_proto protoreflect.FileDescriptor

var file_client_websocket_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd4, 0x01, 0x0a, 0x10, 0x57, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68,
	0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x57, 0x73, 0x41, 0x67, 0x67,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x67, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x0a,
	0x57, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x02,
	0x0a, 0x0f, 0x57, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x73,
	0x70, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x03, 0x61,
	0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x03, 0x61, 0x73, 0x6b,
	0x12, 0x23, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x0a, 0x57, 0x73, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68,
	0x64, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25,
	0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x22, 0xcc, 0x01, 0x0a,
	0x0c, 0x57, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xd9, 0x01, 0x0a, 0x0b,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x0c, 0x57, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa3,
	0x01, 0x0a, 0x0c, 0x57, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x22, 0xad, 0x03, 0x0a, 0x0a, 0x57, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x64, 0x45, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x71, 0x74, 0x79, 0x46,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x2a, 0x97, 0x05, 0x0a, 0x11, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x57, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x4c, 0x10, 0x06, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x45, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x08, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x44, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10,
	0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10,
	0x12, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x16, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x46, 0x45, 0x45,
	0x10, 0x17, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x54, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x19, 0x42, 0x40,
	0x0a, 0x17, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_websocket_proto_rawDescOnce sync.Once
	file_client_websocket_proto_rawDescData = file_client_websocket_proto_rawDesc
)

func file_client_websocket_proto_rawDescGZIP() []byte {
	file_client_websocket_proto_rawDescOnce.Do(func() {
		file_client_websocket_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_websocket_proto_rawDescData)
	})
	return file_client_websocket_proto_rawDescData
}

var file_client_websocket_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_client_websocket_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_client_websocket_proto_goTypes = []interface{}{
	(BalanceChangeType)(0),     // 0: client.BalanceChangeType
	(*WsFundingRateRsp)(nil),   // 1: client.WsFundingRateRsp
	(*WsAggTradeRsp)(nil),      // 2: client.WsAggTradeRsp
	(*WsTradeRsp)(nil),         // 3: client.WsTradeRsp
	(*WsBookTickerRsp)(nil),    // 4: client.WsBookTickerRsp
	(*WsDepthRsp)(nil),         // 5: client.WsDepthRsp
	(*WsAccountReq)(nil),       // 6: client.WsAccountReq
	(*BalanceItem)(nil),        // 7: client.BalanceItem
	(*PositionItem)(nil),       // 8: client.PositionItem
	(*WsAccountRsp)(nil),       // 9: client.WsAccountRsp
	(*WsBalanceRsp)(nil),       // 10: client.WsBalanceRsp
	(*WsOrderRsp)(nil),         // 11: client.WsOrderRsp
	(*common.MsgHeader)(nil),   // 12: MsgHeader
	(common.SymbolType)(0),     // 13: SymbolType
	(order.TradeSide)(0),       // 14: order.TradeSide
	(*depth.DepthLevel)(nil),   // 15: depth.DepthLevel
	(common.Exchange)(0),       // 16: Exchange
	(common.Market)(0),         // 17: Market
	(order.OrderStatusCode)(0), // 18: order.OrderStatusCode
}
var file_client_websocket_proto_depIdxs = []int32{
	12, // 0: client.WsFundingRateRsp.hdr:type_name -> MsgHeader
	13, // 1: client.WsFundingRateRsp.type:type_name -> SymbolType
	14, // 2: client.WsAggTradeRsp.taker_side:type_name -> order.TradeSide
	12, // 3: client.WsTradeRsp.hdr:type_name -> MsgHeader
	14, // 4: client.WsTradeRsp.taker_side:type_name -> order.TradeSide
	12, // 5: client.WsBookTickerRsp.hdr:type_name -> MsgHeader
	15, // 6: client.WsBookTickerRsp.ask:type_name -> depth.DepthLevel
	15, // 7: client.WsBookTickerRsp.bid:type_name -> depth.DepthLevel
	12, // 8: client.WsDepthRsp.hdr:type_name -> MsgHeader
	15, // 9: client.WsDepthRsp.asks:type_name -> depth.DepthLevel
	15, // 10: client.WsDepthRsp.bids:type_name -> depth.DepthLevel
	12, // 11: client.WsAccountReq.hdr:type_name -> MsgHeader
	16, // 12: client.WsAccountReq.exchange:type_name -> Exchange
	17, // 13: client.WsAccountReq.market:type_name -> Market
	13, // 14: client.WsAccountReq.type:type_name -> SymbolType
	17, // 15: client.BalanceItem.market:type_name -> Market
	0,  // 16: client.BalanceItem.change_type:type_name -> client.BalanceChangeType
	14, // 17: client.PositionItem.side:type_name -> order.TradeSide
	17, // 18: client.PositionItem.market:type_name -> Market
	13, // 19: client.PositionItem.type:type_name -> SymbolType
	0,  // 20: client.PositionItem.change_type:type_name -> client.BalanceChangeType
	7,  // 21: client.WsAccountRsp.balance_list:type_name -> client.BalanceItem
	8,  // 22: client.WsAccountRsp.position_list:type_name -> client.PositionItem
	17, // 23: client.WsBalanceRsp.market:type_name -> Market
	18, // 24: client.WsOrderRsp.status:type_name -> order.OrderStatusCode
	17, // 25: client.WsOrderRsp.market:type_name -> Market
	13, // 26: client.WsOrderRsp.type:type_name -> SymbolType
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_client_websocket_proto_init() }
func file_client_websocket_proto_init() {
	if File_client_websocket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_websocket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsFundingRateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsAggTradeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsTradeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsBookTickerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsDepthRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsAccountRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsBalanceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_websocket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsOrderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_websocket_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_websocket_proto_goTypes,
		DependencyIndexes: file_client_websocket_proto_depIdxs,
		EnumInfos:         file_client_websocket_proto_enumTypes,
		MessageInfos:      file_client_websocket_proto_msgTypes,
	}.Build()
	File_client_websocket_proto = out.File
	file_client_websocket_proto_rawDesc = nil
	file_client_websocket_proto_goTypes = nil
	file_client_websocket_proto_depIdxs = nil
}
