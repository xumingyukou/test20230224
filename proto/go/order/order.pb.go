// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.9
// source: order/order.proto

package order

import (
	common "github.com/warmplanet/proto/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderSysType int32

const (
	OrderSysType_InvalidSysType OrderSysType = 0
	OrderSysType_TRADE_CEX      OrderSysType = 1
	OrderSysType_TRADE_DEX      OrderSysType = 2
	OrderSysType_CANCEL_CEX     OrderSysType = 3
	OrderSysType_CANCEL_DEX     OrderSysType = 4
	OrderSysType_TRANSFER       OrderSysType = 5
	OrderSysType_MOVE           OrderSysType = 6
	OrderSysType_HARVEST        OrderSysType = 7
	OrderSysType_LOAN           OrderSysType = 8
	OrderSysType_RETURN         OrderSysType = 9
	OrderSysType_TRANSFER_CHECK OrderSysType = 10
)

// Enum value maps for OrderSysType.
var (
	OrderSysType_name = map[int32]string{
		0:  "InvalidSysType",
		1:  "TRADE_CEX",
		2:  "TRADE_DEX",
		3:  "CANCEL_CEX",
		4:  "CANCEL_DEX",
		5:  "TRANSFER",
		6:  "MOVE",
		7:  "HARVEST",
		8:  "LOAN",
		9:  "RETURN",
		10: "TRANSFER_CHECK",
	}
	OrderSysType_value = map[string]int32{
		"InvalidSysType": 0,
		"TRADE_CEX":      1,
		"TRADE_DEX":      2,
		"CANCEL_CEX":     3,
		"CANCEL_DEX":     4,
		"TRANSFER":       5,
		"MOVE":           6,
		"HARVEST":        7,
		"LOAN":           8,
		"RETURN":         9,
		"TRANSFER_CHECK": 10,
	}
)

func (x OrderSysType) Enum() *OrderSysType {
	p := new(OrderSysType)
	*p = x
	return p
}

func (x OrderSysType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSysType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[0].Descriptor()
}

func (OrderSysType) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[0]
}

func (x OrderSysType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSysType.Descriptor instead.
func (OrderSysType) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{0}
}

type OrderType int32

const (
	OrderType_InvalidOrder      OrderType = 0
	OrderType_LIMIT             OrderType = 1 // 限价单
	OrderType_MARKET            OrderType = 2 // 市价单
	OrderType_STOP              OrderType = 3
	OrderType_TRAILING_STOP     OrderType = 4
	OrderType_TAKE_PROFIE       OrderType = 5
	OrderType_STOP_LOSS         OrderType = 6  // 止损单
	OrderType_STOP_LOSS_LIMIT   OrderType = 7  // 限价止损单
	OrderType_TAKE_PROFIT       OrderType = 8  // 止盈单
	OrderType_TAKE_PROFIT_LIMIT OrderType = 9  // 限价止盈单
	OrderType_LIMIT_MAKER       OrderType = 10 // 限价只挂单
	OrderType_LIQUIDATION       OrderType = 11 //强平单
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0:  "InvalidOrder",
		1:  "LIMIT",
		2:  "MARKET",
		3:  "STOP",
		4:  "TRAILING_STOP",
		5:  "TAKE_PROFIE",
		6:  "STOP_LOSS",
		7:  "STOP_LOSS_LIMIT",
		8:  "TAKE_PROFIT",
		9:  "TAKE_PROFIT_LIMIT",
		10: "LIMIT_MAKER",
		11: "LIQUIDATION",
	}
	OrderType_value = map[string]int32{
		"InvalidOrder":      0,
		"LIMIT":             1,
		"MARKET":            2,
		"STOP":              3,
		"TRAILING_STOP":     4,
		"TAKE_PROFIE":       5,
		"STOP_LOSS":         6,
		"STOP_LOSS_LIMIT":   7,
		"TAKE_PROFIT":       8,
		"TAKE_PROFIT_LIMIT": 9,
		"LIMIT_MAKER":       10,
		"LIQUIDATION":       11,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{1}
}

type OrderStatusCode int32

const (
	OrderStatusCode_OrderStatusInvalid OrderStatusCode = 0
	OrderStatusCode_CREATED            OrderStatusCode = 1
	OrderStatusCode_OPENEING           OrderStatusCode = 2  // 开始开单
	OrderStatusCode_OPENED             OrderStatusCode = 3  // 开单完成
	OrderStatusCode_PARTFILLED         OrderStatusCode = 4  // 订单部分完成
	OrderStatusCode_MODIFYING          OrderStatusCode = 5  // 订单正在修改
	OrderStatusCode_CANCELING          OrderStatusCode = 6  // 订单正在取消
	OrderStatusCode_FILLED             OrderStatusCode = 7  // 订单完成，只适用trade订单
	OrderStatusCode_CANCELED           OrderStatusCode = 8  // 订单被取消
	OrderStatusCode_EXPIRED            OrderStatusCode = 9  // 订单超时
	OrderStatusCode_FAILED             OrderStatusCode = 10 // 订单失败
	OrderStatusCode_NEW_INSURANCE      OrderStatusCode = 11 // 风险保障基金(强平)
	OrderStatusCode_NEW_ADL            OrderStatusCode = 12 // 自动减仓序列(强平)
	// 转账/划转状态
	OrderStatusCode_CHECKING   OrderStatusCode = 21 // 审核中


	
	OrderStatusCode_PROCESSING OrderStatusCode = 22 // 处理中
	OrderStatusCode_PROCESSED  OrderStatusCode = 23 // 处理完成未上账
	OrderStatusCode_TRANSFERED OrderStatusCode = 24 // 已经上账
)

// Enum value maps for OrderStatusCode.
var (
	OrderStatusCode_name = map[int32]string{
		0:  "OrderStatusInvalid",
		1:  "CREATED",
		2:  "OPENEING",
		3:  "OPENED",
		4:  "PARTFILLED",
		5:  "MODIFYING",
		6:  "CANCELING",
		7:  "FILLED",
		8:  "CANCELED",
		9:  "EXPIRED",
		10: "FAILED",
		11: "NEW_INSURANCE",
		12: "NEW_ADL",
		21: "CHECKING",
		22: "PROCESSING",
		23: "PROCESSED",
		24: "TRANSFERED",
	}
	OrderStatusCode_value = map[string]int32{
		"OrderStatusInvalid": 0,
		"CREATED":            1,
		"OPENEING":           2,
		"OPENED":             3,
		"PARTFILLED":         4,
		"MODIFYING":          5,
		"CANCELING":          6,
		"FILLED":             7,
		"CANCELED":           8,
		"EXPIRED":            9,
		"FAILED":             10,
		"NEW_INSURANCE":      11,
		"NEW_ADL":            12,
		"CHECKING":           21,
		"PROCESSING":         22,
		"PROCESSED":          23,
		"TRANSFERED":         24,
	}
)

func (x OrderStatusCode) Enum() *OrderStatusCode {
	p := new(OrderStatusCode)
	*p = x
	return p
}

func (x OrderStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[2].Descriptor()
}

func (OrderStatusCode) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[2]
}

func (x OrderStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatusCode.Descriptor instead.
func (OrderStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{2}
}

// 具体错误代码，预定义几种常用的错误方便策略处理，其余错误统一使用common
type OrderFailCode int32

const (
	OrderFailCode_OrderFailNone        OrderFailCode = 0
	OrderFailCode_OrderFailRateLimited OrderFailCode = 1 // 下单被限速
	OrderFailCode_OrderFailNoBalance   OrderFailCode = 2 // 账户余额不足
	OrderFailCode_OrderFailCommon      OrderFailCode = 100
)

// Enum value maps for OrderFailCode.
var (
	OrderFailCode_name = map[int32]string{
		0:   "OrderFailNone",
		1:   "OrderFailRateLimited",
		2:   "OrderFailNoBalance",
		100: "OrderFailCommon",
	}
	OrderFailCode_value = map[string]int32{
		"OrderFailNone":        0,
		"OrderFailRateLimited": 1,
		"OrderFailNoBalance":   2,
		"OrderFailCommon":      100,
	}
)

func (x OrderFailCode) Enum() *OrderFailCode {
	p := new(OrderFailCode)
	*p = x
	return p
}

func (x OrderFailCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderFailCode) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[3].Descriptor()
}

func (OrderFailCode) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[3]
}

func (x OrderFailCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderFailCode.Descriptor instead.
func (OrderFailCode) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{3}
}

type TradeType int32

const (
	TradeType_InvalidTrade TradeType = 0
	TradeType_TAKER        TradeType = 1
	TradeType_MAKER        TradeType = 2
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "InvalidTrade",
		1: "TAKER",
		2: "MAKER",
	}
	TradeType_value = map[string]int32{
		"InvalidTrade": 0,
		"TAKER":        1,
		"MAKER":        2,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[4].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[4]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{4}
}

type TimeInForce int32

const (
	TimeInForce_InvalidTIF        TimeInForce = 0
	TimeInForce_GTC               TimeInForce = 1  // Good Till Cancel 成交为止
	TimeInForce_IOC               TimeInForce = 2  // Immediate or Cancel 无法立即成交(吃单)的部分就撤销
	TimeInForce_FOK               TimeInForce = 3  // Fill or Kill 无法全部立即成交就撤销
	TimeInForce_GTX               TimeInForce = 4  // Good Till Crossing 无法成为挂单方就撤销
	TimeInForce_OPTIMAL_LIMIT_IOC TimeInForce = 14 //市价委托立即成交并取消剩余（仅适用交割、永续）
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0:  "InvalidTIF",
		1:  "GTC",
		2:  "IOC",
		3:  "FOK",
		4:  "GTX",
		14: "OPTIMAL_LIMIT_IOC",
	}
	TimeInForce_value = map[string]int32{
		"InvalidTIF":        0,
		"GTC":               1,
		"IOC":               2,
		"FOK":               3,
		"GTX":               4,
		"OPTIMAL_LIMIT_IOC": 14,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[5].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[5]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{5}
}

type TradeSide int32

const (
	TradeSide_InvalidSide   TradeSide = 0
	TradeSide_BUY           TradeSide = 1
	TradeSide_SELL          TradeSide = 2
	TradeSide_BUY_TO_OPEN   TradeSide = 3
	TradeSide_SELL_TO_OPEN  TradeSide = 4
	TradeSide_BUY_TO_CLOSE  TradeSide = 5
	TradeSide_SELL_TO_CLOSE TradeSide = 6
)

// Enum value maps for TradeSide.
var (
	TradeSide_name = map[int32]string{
		0: "InvalidSide",
		1: "BUY",
		2: "SELL",
		3: "BUY_TO_OPEN",
		4: "SELL_TO_OPEN",
		5: "BUY_TO_CLOSE",
		6: "SELL_TO_CLOSE",
	}
	TradeSide_value = map[string]int32{
		"InvalidSide":   0,
		"BUY":           1,
		"SELL":          2,
		"BUY_TO_OPEN":   3,
		"SELL_TO_OPEN":  4,
		"BUY_TO_CLOSE":  5,
		"SELL_TO_CLOSE": 6,
	}
)

func (x TradeSide) Enum() *TradeSide {
	p := new(TradeSide)
	*p = x
	return p
}

func (x TradeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[6].Descriptor()
}

func (TradeSide) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[6]
}

func (x TradeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSide.Descriptor instead.
func (TradeSide) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{6}
}

type EthTransactionType int32

const (
	EthTransactionType_INVALID      EthTransactionType = 0
	EthTransactionType_LegacyTx     EthTransactionType = 1
	EthTransactionType_DynamicFeeTx EthTransactionType = 2
	EthTransactionType_AccessListTx EthTransactionType = 3
)

// Enum value maps for EthTransactionType.
var (
	EthTransactionType_name = map[int32]string{
		0: "INVALID",
		1: "LegacyTx",
		2: "DynamicFeeTx",
		3: "AccessListTx",
	}
	EthTransactionType_value = map[string]int32{
		"INVALID":      0,
		"LegacyTx":     1,
		"DynamicFeeTx": 2,
		"AccessListTx": 3,
	}
)

func (x EthTransactionType) Enum() *EthTransactionType {
	p := new(EthTransactionType)
	*p = x
	return p
}

func (x EthTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[7].Descriptor()
}

func (EthTransactionType) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[7]
}

func (x EthTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthTransactionType.Descriptor instead.
func (EthTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{7}
}

type OrderMoveUserType int32

const (
	OrderMoveUserType_Internal OrderMoveUserType = 0 // 账户内部转账
	OrderMoveUserType_Master   OrderMoveUserType = 1 // 主账户发起
	OrderMoveUserType_Sub      OrderMoveUserType = 4 // 子账户发起
)

// Enum value maps for OrderMoveUserType.
var (
	OrderMoveUserType_name = map[int32]string{
		0: "Internal",
		1: "Master",
		4: "Sub",
	}
	OrderMoveUserType_value = map[string]int32{
		"Internal": 0,
		"Master":   1,
		"Sub":      4,
	}
)

func (x OrderMoveUserType) Enum() *OrderMoveUserType {
	p := new(OrderMoveUserType)
	*p = x
	return p
}

func (x OrderMoveUserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderMoveUserType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[8].Descriptor()
}

func (OrderMoveUserType) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[8]
}

func (x OrderMoveUserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderMoveUserType.Descriptor instead.
func (OrderMoveUserType) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{8}
}

// NOTE: 要确保每个结构体中同名的AclKey数值和含义相同
type OrderTradeCEX_AclKey int32

const (
	OrderTradeCEX_INVALID       OrderTradeCEX_AclKey = 0
	OrderTradeCEX_PREFIX_SYMBOL OrderTradeCEX_AclKey = 1 // 前缀匹配symbol，包括exchange,exchange_addr,market,symbol
	OrderTradeCEX_KEY_ACCOUNT   OrderTradeCEX_AclKey = 2 // 精确匹配account，包括exchange,account_id
)

// Enum value maps for OrderTradeCEX_AclKey.
var (
	OrderTradeCEX_AclKey_name = map[int32]string{
		0: "INVALID",
		1: "PREFIX_SYMBOL",
		2: "KEY_ACCOUNT",
	}
	OrderTradeCEX_AclKey_value = map[string]int32{
		"INVALID":       0,
		"PREFIX_SYMBOL": 1,
		"KEY_ACCOUNT":   2,
	}
)

func (x OrderTradeCEX_AclKey) Enum() *OrderTradeCEX_AclKey {
	p := new(OrderTradeCEX_AclKey)
	*p = x
	return p
}

func (x OrderTradeCEX_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTradeCEX_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[9].Descriptor()
}

func (OrderTradeCEX_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[9]
}

func (x OrderTradeCEX_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTradeCEX_AclKey.Descriptor instead.
func (OrderTradeCEX_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{4, 0}
}

type OrderTradeDEX_AclKey int32

const (
	OrderTradeDEX_INVALID       OrderTradeDEX_AclKey = 0
	OrderTradeDEX_PREFIX_SYMBOL OrderTradeDEX_AclKey = 1 // 前缀匹配symbol，包括exchange,exchange_addr,market,symbol
	OrderTradeDEX_KEY_ACCOUNT   OrderTradeDEX_AclKey = 2 // 精确匹配account，包括exchange,account_id
)

// Enum value maps for OrderTradeDEX_AclKey.
var (
	OrderTradeDEX_AclKey_name = map[int32]string{
		0: "INVALID",
		1: "PREFIX_SYMBOL",
		2: "KEY_ACCOUNT",
	}
	OrderTradeDEX_AclKey_value = map[string]int32{
		"INVALID":       0,
		"PREFIX_SYMBOL": 1,
		"KEY_ACCOUNT":   2,
	}
)

func (x OrderTradeDEX_AclKey) Enum() *OrderTradeDEX_AclKey {
	p := new(OrderTradeDEX_AclKey)
	*p = x
	return p
}

func (x OrderTradeDEX_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTradeDEX_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[10].Descriptor()
}

func (OrderTradeDEX_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[10]
}

func (x OrderTradeDEX_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTradeDEX_AclKey.Descriptor instead.
func (OrderTradeDEX_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{5, 0}
}

type OrderCancelCEX_AclKey int32

const (
	OrderCancelCEX_INVALID       OrderCancelCEX_AclKey = 0
	OrderCancelCEX_PREFIX_SYMBOL OrderCancelCEX_AclKey = 1 // 前缀匹配symbol，包括exchange,exchange_addr,market,symbol
	OrderCancelCEX_KEY_ACCOUNT   OrderCancelCEX_AclKey = 2 // 精确匹配account，包括exchange,account_id
)

// Enum value maps for OrderCancelCEX_AclKey.
var (
	OrderCancelCEX_AclKey_name = map[int32]string{
		0: "INVALID",
		1: "PREFIX_SYMBOL",
		2: "KEY_ACCOUNT",
	}
	OrderCancelCEX_AclKey_value = map[string]int32{
		"INVALID":       0,
		"PREFIX_SYMBOL": 1,
		"KEY_ACCOUNT":   2,
	}
)

func (x OrderCancelCEX_AclKey) Enum() *OrderCancelCEX_AclKey {
	p := new(OrderCancelCEX_AclKey)
	*p = x
	return p
}

func (x OrderCancelCEX_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderCancelCEX_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[11].Descriptor()
}

func (OrderCancelCEX_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[11]
}

func (x OrderCancelCEX_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderCancelCEX_AclKey.Descriptor instead.
func (OrderCancelCEX_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{6, 0}
}

type OrderCancelDEX_AclKey int32

const (
	OrderCancelDEX_INVALID       OrderCancelDEX_AclKey = 0
	OrderCancelDEX_PREFIX_SYMBOL OrderCancelDEX_AclKey = 1 // 前缀匹配symbol，包括exchange,exchange_addr,market,symbol
	OrderCancelDEX_KEY_ACCOUNT   OrderCancelDEX_AclKey = 2 // 精确匹配account，包括exchange,account_id
)

// Enum value maps for OrderCancelDEX_AclKey.
var (
	OrderCancelDEX_AclKey_name = map[int32]string{
		0: "INVALID",
		1: "PREFIX_SYMBOL",
		2: "KEY_ACCOUNT",
	}
	OrderCancelDEX_AclKey_value = map[string]int32{
		"INVALID":       0,
		"PREFIX_SYMBOL": 1,
		"KEY_ACCOUNT":   2,
	}
)

func (x OrderCancelDEX_AclKey) Enum() *OrderCancelDEX_AclKey {
	p := new(OrderCancelDEX_AclKey)
	*p = x
	return p
}

func (x OrderCancelDEX_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderCancelDEX_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[12].Descriptor()
}

func (OrderCancelDEX_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[12]
}

func (x OrderCancelDEX_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderCancelDEX_AclKey.Descriptor instead.
func (OrderCancelDEX_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{7, 0}
}

type OrderTransfer_AclKey int32

const (
	OrderTransfer_INVALID           OrderTransfer_AclKey = 0
	OrderTransfer_KEY_ACCOUNT       OrderTransfer_AclKey = 2 // 精确匹配account，包括exchange,account_id
	OrderTransfer_PREFIX_ACCOUNT_TO OrderTransfer_AclKey = 3 // 匹配目的地account，包括exchange_to,exchange_account,exchange_token,[token_address]
)

// Enum value maps for OrderTransfer_AclKey.
var (
	OrderTransfer_AclKey_name = map[int32]string{
		0: "INVALID",
		2: "KEY_ACCOUNT",
		3: "PREFIX_ACCOUNT_TO",
	}
	OrderTransfer_AclKey_value = map[string]int32{
		"INVALID":           0,
		"KEY_ACCOUNT":       2,
		"PREFIX_ACCOUNT_TO": 3,
	}
)

func (x OrderTransfer_AclKey) Enum() *OrderTransfer_AclKey {
	p := new(OrderTransfer_AclKey)
	*p = x
	return p
}

func (x OrderTransfer_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTransfer_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[13].Descriptor()
}

func (OrderTransfer_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[13]
}

func (x OrderTransfer_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTransfer_AclKey.Descriptor instead.
func (OrderTransfer_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{8, 0}
}

type OrderMove_AclKey int32

const (
	OrderMove_INVALID      OrderMove_AclKey = 0
	OrderMove_KEY_ACCOUNT  OrderMove_AclKey = 2 // 精确匹配account，包括exchange,account_id
	OrderMove_PREFIX_TOKEN OrderMove_AclKey = 4 // 精确匹配token，包括exchange,exchange_addr,market,token
)

// Enum value maps for OrderMove_AclKey.
var (
	OrderMove_AclKey_name = map[int32]string{
		0: "INVALID",
		2: "KEY_ACCOUNT",
		4: "PREFIX_TOKEN",
	}
	OrderMove_AclKey_value = map[string]int32{
		"INVALID":      0,
		"KEY_ACCOUNT":  2,
		"PREFIX_TOKEN": 4,
	}
)

func (x OrderMove_AclKey) Enum() *OrderMove_AclKey {
	p := new(OrderMove_AclKey)
	*p = x
	return p
}

func (x OrderMove_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderMove_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[14].Descriptor()
}

func (OrderMove_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[14]
}

func (x OrderMove_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderMove_AclKey.Descriptor instead.
func (OrderMove_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{9, 0}
}

type OrderHarvest_AclKey int32

const (
	OrderHarvest_INVALID     OrderHarvest_AclKey = 0
	OrderHarvest_KEY_ACCOUNT OrderHarvest_AclKey = 2 // 精确匹配account，包括exchange,account_id
	OrderHarvest_KEY_HARVEST OrderHarvest_AclKey = 5 // 精确匹配要harvest的token,包括exchange,harvest token
)

// Enum value maps for OrderHarvest_AclKey.
var (
	OrderHarvest_AclKey_name = map[int32]string{
		0: "INVALID",
		2: "KEY_ACCOUNT",
		5: "KEY_HARVEST",
	}
	OrderHarvest_AclKey_value = map[string]int32{
		"INVALID":     0,
		"KEY_ACCOUNT": 2,
		"KEY_HARVEST": 5,
	}
)

func (x OrderHarvest_AclKey) Enum() *OrderHarvest_AclKey {
	p := new(OrderHarvest_AclKey)
	*p = x
	return p
}

func (x OrderHarvest_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderHarvest_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[15].Descriptor()
}

func (OrderHarvest_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[15]
}

func (x OrderHarvest_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderHarvest_AclKey.Descriptor instead.
func (OrderHarvest_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{10, 0}
}

type OrderLoan_AclKey int32

const (
	OrderLoan_INVALID      OrderLoan_AclKey = 0
	OrderLoan_KEY_ACCOUNT  OrderLoan_AclKey = 2 // 精确匹配account，包括exchange,account_id
	OrderLoan_PREFIX_TOKEN OrderLoan_AclKey = 4 // 匹配token，包括exchange,exchange_addr,market,token
)

// Enum value maps for OrderLoan_AclKey.
var (
	OrderLoan_AclKey_name = map[int32]string{
		0: "INVALID",
		2: "KEY_ACCOUNT",
		4: "PREFIX_TOKEN",
	}
	OrderLoan_AclKey_value = map[string]int32{
		"INVALID":      0,
		"KEY_ACCOUNT":  2,
		"PREFIX_TOKEN": 4,
	}
)

func (x OrderLoan_AclKey) Enum() *OrderLoan_AclKey {
	p := new(OrderLoan_AclKey)
	*p = x
	return p
}

func (x OrderLoan_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderLoan_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[16].Descriptor()
}

func (OrderLoan_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[16]
}

func (x OrderLoan_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderLoan_AclKey.Descriptor instead.
func (OrderLoan_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{11, 0}
}

type OrderReturn_AclKey int32

const (
	OrderReturn_INVALID      OrderReturn_AclKey = 0
	OrderReturn_KEY_ACCOUNT  OrderReturn_AclKey = 2 // 精确匹配account，包括exchange,account_id
	OrderReturn_PREFIX_TOKEN OrderReturn_AclKey = 4 // 匹配token，包括exchange,exchange_addr,market,token
)

// Enum value maps for OrderReturn_AclKey.
var (
	OrderReturn_AclKey_name = map[int32]string{
		0: "INVALID",
		2: "KEY_ACCOUNT",
		4: "PREFIX_TOKEN",
	}
	OrderReturn_AclKey_value = map[string]int32{
		"INVALID":      0,
		"KEY_ACCOUNT":  2,
		"PREFIX_TOKEN": 4,
	}
)

func (x OrderReturn_AclKey) Enum() *OrderReturn_AclKey {
	p := new(OrderReturn_AclKey)
	*p = x
	return p
}

func (x OrderReturn_AclKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderReturn_AclKey) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[17].Descriptor()
}

func (OrderReturn_AclKey) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[17]
}

func (x OrderReturn_AclKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderReturn_AclKey.Descriptor instead.
func (OrderReturn_AclKey) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{12, 0}
}

type OrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr             *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	OrderSysType    OrderSysType      `protobuf:"varint,2,opt,name=order_sys_type,json=orderSysType,proto3,enum=order.OrderSysType" json:"order_sys_type,omitempty"`
	Producer        []byte            `protobuf:"bytes,5,opt,name=producer,proto3" json:"producer,omitempty"`                                          // 订单产生者id
	Id              int64             `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                                                     // 订单产生者自维护ID，由策略产生，自增
	Exchange        common.Exchange   `protobuf:"varint,7,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"`                           //订单所在交易所，DEX的各种swap Dapp也通过本字段区分
	IdEx            string            `protobuf:"bytes,8,opt,name=id_ex,json=idEx,proto3" json:"id_ex,omitempty"`                                      //由OrderSys下单后得到，如CEX交易所返回提供，或DEX的TxHash
	Status          OrderStatusCode   `protobuf:"varint,9,opt,name=status,proto3,enum=order.OrderStatusCode" json:"status,omitempty"`                  // 订单状态
	StatusMsg       []byte            `protobuf:"bytes,10,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`                      // 状态描述，finished下为receipts，取消/错误状态下为描述信息
	AmountFilled    float64           `protobuf:"fixed64,15,opt,name=amount_filled,json=amountFilled,proto3" json:"amount_filled,omitempty"`           // 累计成交量
	PriceFilled     float64           `protobuf:"fixed64,16,opt,name=price_filled,json=priceFilled,proto3" json:"price_filled,omitempty"`              // 累计成交均价
	QtyFilled       float64           `protobuf:"fixed64,17,opt,name=qty_filled,json=qtyFilled,proto3" json:"qty_filled,omitempty"`                    // 累计成交金额
	TimeCreate      int64             `protobuf:"varint,20,opt,name=time_create,json=timeCreate,proto3" json:"time_create,omitempty"`                  // 订单创建时间戳，即策略产生订单时间 microsecond
	TimePlace       int64             `protobuf:"varint,21,opt,name=time_place,json=timePlace,proto3" json:"time_place,omitempty"`                     //  订单下单时间，即交易系统下单时间 microsecond
	TimeReportFirst int64             `protobuf:"varint,22,opt,name=time_report_first,json=timeReportFirst,proto3" json:"time_report_first,omitempty"` // 订单首次回报状态时间 microsecond
	TimeFilledFirst int64             `protobuf:"varint,23,opt,name=time_filled_first,json=timeFilledFirst,proto3" json:"time_filled_first,omitempty"` // 订单成交时间（部分成交时首次成交时间） microsecond
	TimeFinished    int64             `protobuf:"varint,24,opt,name=time_finished,json=timeFinished,proto3" json:"time_finished,omitempty"`            // 订单最终完结时间（含最终cancel） microsecond
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderStatus) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderStatus) GetOrderSysType() OrderSysType {
	if x != nil {
		return x.OrderSysType
	}
	return OrderSysType_InvalidSysType
}

func (x *OrderStatus) GetProducer() []byte {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *OrderStatus) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatus) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *OrderStatus) GetIdEx() string {
	if x != nil {
		return x.IdEx
	}
	return ""
}

func (x *OrderStatus) GetStatus() OrderStatusCode {
	if x != nil {
		return x.Status
	}
	return OrderStatusCode_OrderStatusInvalid
}

func (x *OrderStatus) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *OrderStatus) GetAmountFilled() float64 {
	if x != nil {
		return x.AmountFilled
	}
	return 0
}

func (x *OrderStatus) GetPriceFilled() float64 {
	if x != nil {
		return x.PriceFilled
	}
	return 0
}

func (x *OrderStatus) GetQtyFilled() float64 {
	if x != nil {
		return x.QtyFilled
	}
	return 0
}

func (x *OrderStatus) GetTimeCreate() int64 {
	if x != nil {
		return x.TimeCreate
	}
	return 0
}

func (x *OrderStatus) GetTimePlace() int64 {
	if x != nil {
		return x.TimePlace
	}
	return 0
}

func (x *OrderStatus) GetTimeReportFirst() int64 {
	if x != nil {
		return x.TimeReportFirst
	}
	return 0
}

func (x *OrderStatus) GetTimeFilledFirst() int64 {
	if x != nil {
		return x.TimeFilledFirst
	}
	return 0
}

func (x *OrderStatus) GetTimeFinished() int64 {
	if x != nil {
		return x.TimeFinished
	}
	return 0
}

type OrderHedge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderType     OrderType         `protobuf:"varint,1,opt,name=order_type,json=orderType,proto3,enum=order.OrderType" json:"order_type,omitempty"` // 订单类型
	TradeType     TradeType         `protobuf:"varint,2,opt,name=trade_type,json=tradeType,proto3,enum=order.TradeType" json:"trade_type,omitempty"` // 交易类型
	Side          TradeSide         `protobuf:"varint,3,opt,name=side,proto3,enum=order.TradeSide" json:"side,omitempty"`                            // 交易方向
	Tif           TimeInForce       `protobuf:"varint,4,opt,name=tif,proto3,enum=order.TimeInForce" json:"tif,omitempty"`                            // TimeInForce类型
	PriceExpected float64           `protobuf:"fixed64,5,opt,name=price_expected,json=priceExpected,proto3" json:"price_expected,omitempty"`         // 预期的对冲成交价格
	Amount        float64           `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`                                            // 对冲交易量-token
	Exchange      common.Exchange   `protobuf:"varint,10,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"`                          //下单交易所，DEX的各种swap Dapp也通过本字段区分
	ExchangeAddr  []byte            `protobuf:"bytes,11,opt,name=exchange_addr,json=exchangeAddr,proto3" json:"exchange_addr,omitempty"`             // 可选，一般只有dex exchcange设置
	AccountId     []byte            `protobuf:"bytes,12,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                      //交易账户，CEX 交易系统据此选择相应账户下的APIKey，一个交易所下的多个交易账户都由交易系统统一管理
	Market        common.Market     `protobuf:"varint,13,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                                // 交易区，分spot margin杠杆区 期货 永续 期权等
	Type          common.SymbolType `protobuf:"varint,14,opt,name=type,proto3,enum=SymbolType" json:"type,omitempty"`
	Symbol        []byte            `protobuf:"bytes,15,opt,name=symbol,proto3" json:"symbol,omitempty"`                                 // 交易对
	Token         []byte            `protobuf:"bytes,16,opt,name=token,proto3" json:"token,omitempty"`                                   // 交易对-token
	Quote         []byte            `protobuf:"bytes,17,opt,name=quote,proto3" json:"quote,omitempty"`                                   // 交易对-quote
	ContractType  []byte            `protobuf:"bytes,18,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"` //交易所-合约类型
}

func (x *OrderHedge) Reset() {
	*x = OrderHedge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHedge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHedge) ProtoMessage() {}

func (x *OrderHedge) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHedge.ProtoReflect.Descriptor instead.
func (*OrderHedge) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderHedge) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_InvalidOrder
}

func (x *OrderHedge) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_InvalidTrade
}

func (x *OrderHedge) GetSide() TradeSide {
	if x != nil {
		return x.Side
	}
	return TradeSide_InvalidSide
}

func (x *OrderHedge) GetTif() TimeInForce {
	if x != nil {
		return x.Tif
	}
	return TimeInForce_InvalidTIF
}

func (x *OrderHedge) GetPriceExpected() float64 {
	if x != nil {
		return x.PriceExpected
	}
	return 0
}

func (x *OrderHedge) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderHedge) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *OrderHedge) GetExchangeAddr() []byte {
	if x != nil {
		return x.ExchangeAddr
	}
	return nil
}

func (x *OrderHedge) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *OrderHedge) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *OrderHedge) GetType() common.SymbolType {
	if x != nil {
		return x.Type
	}
	return common.SymbolType(0)
}

func (x *OrderHedge) GetSymbol() []byte {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *OrderHedge) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *OrderHedge) GetQuote() []byte {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *OrderHedge) GetContractType() []byte {
	if x != nil {
		return x.ContractType
	}
	return nil
}

// 基础订单信息
type OrderBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         //DeepTrading自维护ID，由策略产生，自增
	IdEx         string            `protobuf:"bytes,2,opt,name=id_ex,json=idEx,proto3" json:"id_ex,omitempty"`                          //由OrderSys下单后得到，如CEX交易所返回提供，或DEX的TxHash
	IdHedge      int64             `protobuf:"varint,3,opt,name=id_hedge,json=idHedge,proto3" json:"id_hedge,omitempty"`                // 通过id_hedge，可以将一组订单和一组对冲单匹配起来，计算对冲交易的利润
	TimeCreate   int64             `protobuf:"varint,4,opt,name=time_create,json=timeCreate,proto3" json:"time_create,omitempty"`       // 订单创建时间戳，即策略产生订单时间 microsecond
	Exchange     common.Exchange   `protobuf:"varint,10,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"`              //下单交易所，DEX的各种swap Dapp也通过本字段区分
	ExchangeAddr []byte            `protobuf:"bytes,11,opt,name=exchange_addr,json=exchangeAddr,proto3" json:"exchange_addr,omitempty"` // 可选，一般只有dex exchcange设置
	AccountId    []byte            `protobuf:"bytes,12,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`          //交易账户，CEX 交易系统据此选择相应账户下的APIKey，一个交易所下的多个交易账户都由交易系统统一管理
	Market       common.Market     `protobuf:"varint,13,opt,name=market,proto3,enum=Market" json:"market,omitempty"`                    // 交易区，分spot margin杠杆区 期货 永续 期权等
	Type         common.SymbolType `protobuf:"varint,14,opt,name=type,proto3,enum=SymbolType" json:"type,omitempty"`
	Symbol       []byte            `protobuf:"bytes,15,opt,name=symbol,proto3" json:"symbol,omitempty"`                                 // 交易对
	Token        []byte            `protobuf:"bytes,16,opt,name=token,proto3" json:"token,omitempty"`                                   // 交易对-token
	Quote        []byte            `protobuf:"bytes,17,opt,name=quote,proto3" json:"quote,omitempty"`                                   // 交易对-quote
	ContractType []byte            `protobuf:"bytes,18,opt,name=contract_type,json=contractType,proto3" json:"contract_type,omitempty"` //交易所-合约类型
}

func (x *OrderBase) Reset() {
	*x = OrderBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBase) ProtoMessage() {}

func (x *OrderBase) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBase.ProtoReflect.Descriptor instead.
func (*OrderBase) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBase) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderBase) GetIdEx() string {
	if x != nil {
		return x.IdEx
	}
	return ""
}

func (x *OrderBase) GetIdHedge() int64 {
	if x != nil {
		return x.IdHedge
	}
	return 0
}

func (x *OrderBase) GetTimeCreate() int64 {
	if x != nil {
		return x.TimeCreate
	}
	return 0
}

func (x *OrderBase) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *OrderBase) GetExchangeAddr() []byte {
	if x != nil {
		return x.ExchangeAddr
	}
	return nil
}

func (x *OrderBase) GetAccountId() []byte {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *OrderBase) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *OrderBase) GetType() common.SymbolType {
	if x != nil {
		return x.Type
	}
	return common.SymbolType(0)
}

func (x *OrderBase) GetSymbol() []byte {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *OrderBase) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *OrderBase) GetQuote() []byte {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *OrderBase) GetContractType() []byte {
	if x != nil {
		return x.ContractType
	}
	return nil
}

// 类以太坊DEX订单信息
type EthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replace              bool               `protobuf:"varint,1,opt,name=replace,proto3" json:"replace,omitempty"`                                                             // 是否为更新交易，如果是，则上述多数字段都有值，如id_ex
	GasLimit             uint64             `protobuf:"varint,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`                                           // 总gas上限
	Nonce                uint64             `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`                                                                 // DEX订单的nonce
	GasPrice             uint64             `protobuf:"varint,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`                                           // DEX下单的gasprice
	UseChi               bool               `protobuf:"varint,5,opt,name=use_chi,json=useChi,proto3" json:"use_chi,omitempty"`                                                 // DEX下单是否使用chi
	Data                 []byte             `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`                                                                    // 交易数据
	TxType               EthTransactionType `protobuf:"varint,7,opt,name=tx_type,json=txType,proto3,enum=order.EthTransactionType" json:"tx_type,omitempty"`                   //转发方式
	MaxPriorityFeePerGas uint64             `protobuf:"varint,8,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"` // 每gas最高优先收费
	MaxFeePerGas         uint64             `protobuf:"varint,9,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`                           // 每gas最高收费
	Value                string             `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`                                                                 // tx中设置的value，如果为空表示不设置
}

func (x *EthInfo) Reset() {
	*x = EthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthInfo) ProtoMessage() {}

func (x *EthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthInfo.ProtoReflect.Descriptor instead.
func (*EthInfo) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{3}
}

func (x *EthInfo) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *EthInfo) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthInfo) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthInfo) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *EthInfo) GetUseChi() bool {
	if x != nil {
		return x.UseChi
	}
	return false
}

func (x *EthInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EthInfo) GetTxType() EthTransactionType {
	if x != nil {
		return x.TxType
	}
	return EthTransactionType_INVALID
}

func (x *EthInfo) GetMaxPriorityFeePerGas() uint64 {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return 0
}

func (x *EthInfo) GetMaxFeePerGas() uint64 {
	if x != nil {
		return x.MaxFeePerGas
	}
	return 0
}

func (x *EthInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// CEX交易订单
type OrderTradeCEX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr           *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base          *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                         // 基本信息
	AuthInfo      []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"` // 校验信息，发送方需要按照ordersys的要求携带校验信息
	OrderType     OrderType         `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=order.OrderType" json:"order_type,omitempty"`
	TradeType     TradeType         `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3,enum=order.TradeType" json:"trade_type,omitempty"` // 订单类型
	Side          TradeSide         `protobuf:"varint,7,opt,name=side,proto3,enum=order.TradeSide" json:"side,omitempty"`                            // 交易方向
	Tif           TimeInForce       `protobuf:"varint,8,opt,name=tif,proto3,enum=order.TimeInForce" json:"tif,omitempty"`                            // TimeInForce类型
	OrderExt      *anypb.Any        `protobuf:"bytes,10,opt,name=order_ext,json=orderExt,proto3" json:"order_ext,omitempty"`                         // 根据订单类型不同的扩展字段
	Amount        float64           `protobuf:"fixed64,15,opt,name=amount,proto3" json:"amount,omitempty"`                                           // 下单交易量
	Price         float64           `protobuf:"fixed64,16,opt,name=price,proto3" json:"price,omitempty"`                                             // 下单价格
	PriceExpected float64           `protobuf:"fixed64,17,opt,name=price_expected,json=priceExpected,proto3" json:"price_expected,omitempty"`        // 策略预期成交价
	PriceLimit    float64           `protobuf:"fixed64,18,opt,name=price_limit,json=priceLimit,proto3" json:"price_limit,omitempty"`                 // 限价，价格最差不能超过这个限制
	HedgeExpect   []*OrderHedge     `protobuf:"bytes,30,rep,name=hedge_expect,json=hedgeExpect,proto3" json:"hedge_expect,omitempty"`                // 预期对冲交易，支持多地对冲
}

func (x *OrderTradeCEX) Reset() {
	*x = OrderTradeCEX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTradeCEX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTradeCEX) ProtoMessage() {}

func (x *OrderTradeCEX) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTradeCEX.ProtoReflect.Descriptor instead.
func (*OrderTradeCEX) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{4}
}

func (x *OrderTradeCEX) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderTradeCEX) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderTradeCEX) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderTradeCEX) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_InvalidOrder
}

func (x *OrderTradeCEX) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_InvalidTrade
}

func (x *OrderTradeCEX) GetSide() TradeSide {
	if x != nil {
		return x.Side
	}
	return TradeSide_InvalidSide
}

func (x *OrderTradeCEX) GetTif() TimeInForce {
	if x != nil {
		return x.Tif
	}
	return TimeInForce_InvalidTIF
}

func (x *OrderTradeCEX) GetOrderExt() *anypb.Any {
	if x != nil {
		return x.OrderExt
	}
	return nil
}

func (x *OrderTradeCEX) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderTradeCEX) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderTradeCEX) GetPriceExpected() float64 {
	if x != nil {
		return x.PriceExpected
	}
	return 0
}

func (x *OrderTradeCEX) GetPriceLimit() float64 {
	if x != nil {
		return x.PriceLimit
	}
	return 0
}

func (x *OrderTradeCEX) GetHedgeExpect() []*OrderHedge {
	if x != nil {
		return x.HedgeExpect
	}
	return nil
}

// DEX交易订单
type OrderTradeDEX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr           *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base          *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                         // 基本信息
	AuthInfo      []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"` // 校验信息，发送方需要按照ordersys的要求携带校验信息
	OrderType     OrderType         `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=order.OrderType" json:"order_type,omitempty"`
	TradeType     TradeType         `protobuf:"varint,6,opt,name=trade_type,json=tradeType,proto3,enum=order.TradeType" json:"trade_type,omitempty"` // 订单类型
	Side          TradeSide         `protobuf:"varint,7,opt,name=side,proto3,enum=order.TradeSide" json:"side,omitempty"`                            // 交易方向
	Tif           TimeInForce       `protobuf:"varint,8,opt,name=tif,proto3,enum=order.TimeInForce" json:"tif,omitempty"`                            // TimeInForce类型
	OrderExt      *anypb.Any        `protobuf:"bytes,9,opt,name=order_ext,json=orderExt,proto3" json:"order_ext,omitempty"`                          // 根据订单类型不同的扩展字段
	Amount        float64           `protobuf:"fixed64,15,opt,name=amount,proto3" json:"amount,omitempty"`                                           // 下单交易量
	Price         float64           `protobuf:"fixed64,16,opt,name=price,proto3" json:"price,omitempty"`                                             // 下单价格
	PriceExpected float64           `protobuf:"fixed64,17,opt,name=price_expected,json=priceExpected,proto3" json:"price_expected,omitempty"`        // 策略预期成交价
	PriceLimit    float64           `protobuf:"fixed64,18,opt,name=price_limit,json=priceLimit,proto3" json:"price_limit,omitempty"`                 // 限价，价格最差不能超过这个限制
	HedgeExpect   []*OrderHedge     `protobuf:"bytes,30,rep,name=hedge_expect,json=hedgeExpect,proto3" json:"hedge_expect,omitempty"`                // 预期对冲交易，支持多地对冲
	// Types that are assignable to DexInfo:
	//	*OrderTradeDEX_Null
	//	*OrderTradeDEX_E
	DexInfo isOrderTradeDEX_DexInfo `protobuf_oneof:"dex_info"`
}

func (x *OrderTradeDEX) Reset() {
	*x = OrderTradeDEX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTradeDEX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTradeDEX) ProtoMessage() {}

func (x *OrderTradeDEX) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTradeDEX.ProtoReflect.Descriptor instead.
func (*OrderTradeDEX) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{5}
}

func (x *OrderTradeDEX) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderTradeDEX) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderTradeDEX) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderTradeDEX) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_InvalidOrder
}

func (x *OrderTradeDEX) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_InvalidTrade
}

func (x *OrderTradeDEX) GetSide() TradeSide {
	if x != nil {
		return x.Side
	}
	return TradeSide_InvalidSide
}

func (x *OrderTradeDEX) GetTif() TimeInForce {
	if x != nil {
		return x.Tif
	}
	return TimeInForce_InvalidTIF
}

func (x *OrderTradeDEX) GetOrderExt() *anypb.Any {
	if x != nil {
		return x.OrderExt
	}
	return nil
}

func (x *OrderTradeDEX) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderTradeDEX) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderTradeDEX) GetPriceExpected() float64 {
	if x != nil {
		return x.PriceExpected
	}
	return 0
}

func (x *OrderTradeDEX) GetPriceLimit() float64 {
	if x != nil {
		return x.PriceLimit
	}
	return 0
}

func (x *OrderTradeDEX) GetHedgeExpect() []*OrderHedge {
	if x != nil {
		return x.HedgeExpect
	}
	return nil
}

func (m *OrderTradeDEX) GetDexInfo() isOrderTradeDEX_DexInfo {
	if m != nil {
		return m.DexInfo
	}
	return nil
}

func (x *OrderTradeDEX) GetNull() structpb.NullValue {
	if x, ok := x.GetDexInfo().(*OrderTradeDEX_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderTradeDEX) GetE() *EthInfo {
	if x, ok := x.GetDexInfo().(*OrderTradeDEX_E); ok {
		return x.E
	}
	return nil
}

type isOrderTradeDEX_DexInfo interface {
	isOrderTradeDEX_DexInfo()
}

type OrderTradeDEX_Null struct {
	Null structpb.NullValue `protobuf:"varint,40,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderTradeDEX_E struct {
	E *EthInfo `protobuf:"bytes,41,opt,name=e,proto3,oneof"` // dex额外信息
}

func (*OrderTradeDEX_Null) isOrderTradeDEX_DexInfo() {}

func (*OrderTradeDEX_E) isOrderTradeDEX_DexInfo() {}

// CEX取消订单
type OrderCancelCEX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr      *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base     *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                          // 基本信息
	AuthInfo []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`  // 校验信息，发送方需要按照ordersys的要求携带校验信息
	CancelId int64             `protobuf:"varint,5,opt,name=cancel_id,json=cancelId,proto3" json:"cancel_id,omitempty"` // DeepTrading自维护取消ID，由策略产生，自增，可选
	Side     TradeSide         `protobuf:"varint,6,opt,name=side,proto3,enum=order.TradeSide" json:"side,omitempty"`    // 要取消订单的交易方向
}

func (x *OrderCancelCEX) Reset() {
	*x = OrderCancelCEX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancelCEX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancelCEX) ProtoMessage() {}

func (x *OrderCancelCEX) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancelCEX.ProtoReflect.Descriptor instead.
func (*OrderCancelCEX) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{6}
}

func (x *OrderCancelCEX) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderCancelCEX) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderCancelCEX) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderCancelCEX) GetCancelId() int64 {
	if x != nil {
		return x.CancelId
	}
	return 0
}

func (x *OrderCancelCEX) GetSide() TradeSide {
	if x != nil {
		return x.Side
	}
	return TradeSide_InvalidSide
}

// DEX取消订单
type OrderCancelDEX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr      *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base     *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                          // 基本信息
	AuthInfo []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`  // 校验信息，发送方需要按照ordersys的要求携带校验信息
	CancelId int64             `protobuf:"varint,5,opt,name=cancel_id,json=cancelId,proto3" json:"cancel_id,omitempty"` // DeepTrading自维护取消ID，由策略产生，自增，可选
	Side     TradeSide         `protobuf:"varint,6,opt,name=side,proto3,enum=order.TradeSide" json:"side,omitempty"`    // 要取消订单的交易方向
	// Types that are assignable to DexInfo:
	//	*OrderCancelDEX_Null
	//	*OrderCancelDEX_E
	DexInfo isOrderCancelDEX_DexInfo `protobuf_oneof:"dex_info"`
}

func (x *OrderCancelDEX) Reset() {
	*x = OrderCancelDEX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancelDEX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancelDEX) ProtoMessage() {}

func (x *OrderCancelDEX) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancelDEX.ProtoReflect.Descriptor instead.
func (*OrderCancelDEX) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{7}
}

func (x *OrderCancelDEX) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderCancelDEX) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderCancelDEX) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderCancelDEX) GetCancelId() int64 {
	if x != nil {
		return x.CancelId
	}
	return 0
}

func (x *OrderCancelDEX) GetSide() TradeSide {
	if x != nil {
		return x.Side
	}
	return TradeSide_InvalidSide
}

func (m *OrderCancelDEX) GetDexInfo() isOrderCancelDEX_DexInfo {
	if m != nil {
		return m.DexInfo
	}
	return nil
}

func (x *OrderCancelDEX) GetNull() structpb.NullValue {
	if x, ok := x.GetDexInfo().(*OrderCancelDEX_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderCancelDEX) GetE() *EthInfo {
	if x, ok := x.GetDexInfo().(*OrderCancelDEX_E); ok {
		return x.E
	}
	return nil
}

type isOrderCancelDEX_DexInfo interface {
	isOrderCancelDEX_DexInfo()
}

type OrderCancelDEX_Null struct {
	Null structpb.NullValue `protobuf:"varint,10,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderCancelDEX_E struct {
	E *EthInfo `protobuf:"bytes,11,opt,name=e,proto3,oneof"`
}

func (*OrderCancelDEX_Null) isOrderCancelDEX_DexInfo() {}

func (*OrderCancelDEX_E) isOrderCancelDEX_DexInfo() {}

// 转账订单
type OrderTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr             *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base            *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                                               // 基本信息
	AuthInfo        []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`                       // 校验信息，发送方需要按照ordersys的要求携带校验信息
	Chain           common.Chain      `protobuf:"varint,4,opt,name=chain,proto3,enum=Chain" json:"chain,omitempty"`                                 // 提币使用的链
	Amount          float64           `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                                         // 提币数量，这个量不要整数，要加个随机小数来作为跟踪id
	ExchangeTo      common.Exchange   `protobuf:"varint,6,opt,name=exchange_to,json=exchangeTo,proto3,enum=Exchange" json:"exchange_to,omitempty"`  // 转账的目的地交易所
	ExchangeToAddr  []byte            `protobuf:"bytes,7,opt,name=exchange_to_addr,json=exchangeToAddr,proto3" json:"exchange_to_addr,omitempty"`   // 目的交易所地址，可选字段
	FromAccount     []byte            `protobuf:"bytes,13,opt,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`             // 转账源地交易所账户
	ExchangeAccount []byte            `protobuf:"bytes,8,opt,name=exchange_account,json=exchangeAccount,proto3" json:"exchange_account,omitempty"`  // 转账目的地交易所账户
	ExchangeToken   []byte            `protobuf:"bytes,9,opt,name=exchange_token,json=exchangeToken,proto3" json:"exchange_token,omitempty"`        // 转账目的地交易所的token名，如bitbank的bcc
	TransferAddress []byte            `protobuf:"bytes,10,opt,name=transfer_address,json=transferAddress,proto3" json:"transfer_address,omitempty"` // 转账目的地地址，供OrderSys双重白名单验证
	Tag             []byte            `protobuf:"bytes,11,opt,name=tag,proto3" json:"tag,omitempty"`                                                // 转账address提供的tag信息
	Comment         []byte            `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`                                        // 转账备注
	// Types that are assignable to DexInfo:
	//	*OrderTransfer_Null
	//	*OrderTransfer_E
	DexInfo isOrderTransfer_DexInfo `protobuf_oneof:"dex_info"`
}

func (x *OrderTransfer) Reset() {
	*x = OrderTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTransfer) ProtoMessage() {}

func (x *OrderTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTransfer.ProtoReflect.Descriptor instead.
func (*OrderTransfer) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{8}
}

func (x *OrderTransfer) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderTransfer) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderTransfer) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderTransfer) GetChain() common.Chain {
	if x != nil {
		return x.Chain
	}
	return common.Chain(0)
}

func (x *OrderTransfer) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderTransfer) GetExchangeTo() common.Exchange {
	if x != nil {
		return x.ExchangeTo
	}
	return common.Exchange(0)
}

func (x *OrderTransfer) GetExchangeToAddr() []byte {
	if x != nil {
		return x.ExchangeToAddr
	}
	return nil
}

func (x *OrderTransfer) GetFromAccount() []byte {
	if x != nil {
		return x.FromAccount
	}
	return nil
}

func (x *OrderTransfer) GetExchangeAccount() []byte {
	if x != nil {
		return x.ExchangeAccount
	}
	return nil
}

func (x *OrderTransfer) GetExchangeToken() []byte {
	if x != nil {
		return x.ExchangeToken
	}
	return nil
}

func (x *OrderTransfer) GetTransferAddress() []byte {
	if x != nil {
		return x.TransferAddress
	}
	return nil
}

func (x *OrderTransfer) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *OrderTransfer) GetComment() []byte {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (m *OrderTransfer) GetDexInfo() isOrderTransfer_DexInfo {
	if m != nil {
		return m.DexInfo
	}
	return nil
}

func (x *OrderTransfer) GetNull() structpb.NullValue {
	if x, ok := x.GetDexInfo().(*OrderTransfer_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderTransfer) GetE() *EthInfo {
	if x, ok := x.GetDexInfo().(*OrderTransfer_E); ok {
		return x.E
	}
	return nil
}

type isOrderTransfer_DexInfo interface {
	isOrderTransfer_DexInfo()
}

type OrderTransfer_Null struct {
	Null structpb.NullValue `protobuf:"varint,20,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderTransfer_E struct {
	E *EthInfo `protobuf:"bytes,21,opt,name=e,proto3,oneof"` // dex转账需要的额外信息
}

func (*OrderTransfer_Null) isOrderTransfer_DexInfo() {}

func (*OrderTransfer_E) isOrderTransfer_DexInfo() {}

// 划转订单
type OrderMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr           *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base          *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                                                              // 基本信息
	AuthInfo      []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"`                                      // 校验信息，发送方需要按照ordersys的要求携带校验信息
	Asset         string            `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`                                                            // 划转币种
	Amount        float64           `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                                                        // 划转量
	Source        common.Market     `protobuf:"varint,6,opt,name=source,proto3,enum=Market" json:"source,omitempty"`                                             // 划转的原始地交易区
	Target        common.Market     `protobuf:"varint,7,opt,name=target,proto3,enum=Market" json:"target,omitempty"`                                             // 划转的目的地交易区
	SymbolSource  string            `protobuf:"bytes,8,opt,name=symbol_source,json=symbolSource,proto3" json:"symbol_source,omitempty"`                          // 用于逐仓杠杆的交易币种
	SymbolTarget  string            `protobuf:"bytes,9,opt,name=symbol_target,json=symbolTarget,proto3" json:"symbol_target,omitempty"`                          // 用于逐仓杠杆的交易币种
	AccountSource string            `protobuf:"bytes,21,opt,name=account_source,json=accountSource,proto3" json:"account_source,omitempty"`                      // 如果为子账号，需要设置账号名称
	AccountTarget string            `protobuf:"bytes,22,opt,name=account_target,json=accountTarget,proto3" json:"account_target,omitempty"`                      // 如果为子账号，需要设置账号名称
	ActionUser    OrderMoveUserType `protobuf:"varint,23,opt,name=action_user,json=actionUser,proto3,enum=order.OrderMoveUserType" json:"action_user,omitempty"` // 划转执行者
	// Types that are assignable to DexInfo:
	//	*OrderMove_Null
	//	*OrderMove_E
	DexInfo isOrderMove_DexInfo `protobuf_oneof:"dex_info"`
}

func (x *OrderMove) Reset() {
	*x = OrderMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMove) ProtoMessage() {}

func (x *OrderMove) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMove.ProtoReflect.Descriptor instead.
func (*OrderMove) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{9}
}

func (x *OrderMove) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderMove) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderMove) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderMove) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *OrderMove) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderMove) GetSource() common.Market {
	if x != nil {
		return x.Source
	}
	return common.Market(0)
}

func (x *OrderMove) GetTarget() common.Market {
	if x != nil {
		return x.Target
	}
	return common.Market(0)
}

func (x *OrderMove) GetSymbolSource() string {
	if x != nil {
		return x.SymbolSource
	}
	return ""
}

func (x *OrderMove) GetSymbolTarget() string {
	if x != nil {
		return x.SymbolTarget
	}
	return ""
}

func (x *OrderMove) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *OrderMove) GetAccountTarget() string {
	if x != nil {
		return x.AccountTarget
	}
	return ""
}

func (x *OrderMove) GetActionUser() OrderMoveUserType {
	if x != nil {
		return x.ActionUser
	}
	return OrderMoveUserType_Internal
}

func (m *OrderMove) GetDexInfo() isOrderMove_DexInfo {
	if m != nil {
		return m.DexInfo
	}
	return nil
}

func (x *OrderMove) GetNull() structpb.NullValue {
	if x, ok := x.GetDexInfo().(*OrderMove_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderMove) GetE() *EthInfo {
	if x, ok := x.GetDexInfo().(*OrderMove_E); ok {
		return x.E
	}
	return nil
}

type isOrderMove_DexInfo interface {
	isOrderMove_DexInfo()
}

type OrderMove_Null struct {
	Null structpb.NullValue `protobuf:"varint,10,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderMove_E struct {
	E *EthInfo `protobuf:"bytes,11,opt,name=e,proto3,oneof"` // dex转账需要的额外信息
}

func (*OrderMove_Null) isOrderMove_DexInfo() {}

func (*OrderMove_E) isOrderMove_DexInfo() {}

// harvest订单
type OrderHarvest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr      *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base     *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                         // 基本信息
	AuthInfo []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"` // 校验信息，发送方需要按照ordersys的要求携带校验信息
	Amount   float64           `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                   // 要harvest的量
	Token    []byte            `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`                       // 要harvest的token
	// Types that are assignable to DexInfo:
	//	*OrderHarvest_Null
	//	*OrderHarvest_E
	DexInfo isOrderHarvest_DexInfo `protobuf_oneof:"dex_info"`
}

func (x *OrderHarvest) Reset() {
	*x = OrderHarvest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHarvest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHarvest) ProtoMessage() {}

func (x *OrderHarvest) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHarvest.ProtoReflect.Descriptor instead.
func (*OrderHarvest) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{10}
}

func (x *OrderHarvest) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderHarvest) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderHarvest) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderHarvest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderHarvest) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (m *OrderHarvest) GetDexInfo() isOrderHarvest_DexInfo {
	if m != nil {
		return m.DexInfo
	}
	return nil
}

func (x *OrderHarvest) GetNull() structpb.NullValue {
	if x, ok := x.GetDexInfo().(*OrderHarvest_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderHarvest) GetE() *EthInfo {
	if x, ok := x.GetDexInfo().(*OrderHarvest_E); ok {
		return x.E
	}
	return nil
}

type isOrderHarvest_DexInfo interface {
	isOrderHarvest_DexInfo()
}

type OrderHarvest_Null struct {
	Null structpb.NullValue `protobuf:"varint,10,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderHarvest_E struct {
	E *EthInfo `protobuf:"bytes,11,opt,name=e,proto3,oneof"` // dex转账需要的额外信息
}

func (*OrderHarvest_Null) isOrderHarvest_DexInfo() {}

func (*OrderHarvest_E) isOrderHarvest_DexInfo() {}

// 借币订单
type OrderLoan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr      *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base     *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                         // 基本信息
	AuthInfo []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"` // 校验信息，发送方需要按照ordersys的要求携带校验信息
	Asset    string            `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`                       // 借的资产名称
	Amount   float64           `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                   // 借贷量
	// Types that are assignable to DexInfo:
	//	*OrderLoan_Null
	//	*OrderLoan_E
	DexInfo isOrderLoan_DexInfo `protobuf_oneof:"dex_info"`
}

func (x *OrderLoan) Reset() {
	*x = OrderLoan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderLoan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderLoan) ProtoMessage() {}

func (x *OrderLoan) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderLoan.ProtoReflect.Descriptor instead.
func (*OrderLoan) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{11}
}

func (x *OrderLoan) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderLoan) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderLoan) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderLoan) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *OrderLoan) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (m *OrderLoan) GetDexInfo() isOrderLoan_DexInfo {
	if m != nil {
		return m.DexInfo
	}
	return nil
}

func (x *OrderLoan) GetNull() structpb.NullValue {
	if x, ok := x.GetDexInfo().(*OrderLoan_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderLoan) GetE() *EthInfo {
	if x, ok := x.GetDexInfo().(*OrderLoan_E); ok {
		return x.E
	}
	return nil
}

type isOrderLoan_DexInfo interface {
	isOrderLoan_DexInfo()
}

type OrderLoan_Null struct {
	Null structpb.NullValue `protobuf:"varint,10,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderLoan_E struct {
	E *EthInfo `protobuf:"bytes,11,opt,name=e,proto3,oneof"` // dex转账需要的额外信息
}

func (*OrderLoan_Null) isOrderLoan_DexInfo() {}

func (*OrderLoan_E) isOrderLoan_DexInfo() {}

// 还币订单
type OrderReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdr      *common.MsgHeader `protobuf:"bytes,1,opt,name=hdr,proto3" json:"hdr,omitempty"`
	Base     *OrderBase        `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`                         // 基本信息
	AuthInfo []byte            `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3" json:"auth_info,omitempty"` // 校验信息，发送方需要按照ordersys的要求携带校验信息
	Asset    string            `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`                       // 借的资产名称
	Amount   float64           `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                   // 还贷量
	// Types that are assignable to DexInfo:
	//	*OrderReturn_Null
	//	*OrderReturn_E
	DexInfo isOrderReturn_DexInfo `protobuf_oneof:"dex_info"`
}

func (x *OrderReturn) Reset() {
	*x = OrderReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReturn) ProtoMessage() {}

func (x *OrderReturn) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReturn.ProtoReflect.Descriptor instead.
func (*OrderReturn) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{12}
}

func (x *OrderReturn) GetHdr() *common.MsgHeader {
	if x != nil {
		return x.Hdr
	}
	return nil
}

func (x *OrderReturn) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OrderReturn) GetAuthInfo() []byte {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *OrderReturn) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *OrderReturn) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (m *OrderReturn) GetDexInfo() isOrderReturn_DexInfo {
	if m != nil {
		return m.DexInfo
	}
	return nil
}

func (x *OrderReturn) GetNull() structpb.NullValue {
	if x, ok := x.GetDexInfo().(*OrderReturn_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderReturn) GetE() *EthInfo {
	if x, ok := x.GetDexInfo().(*OrderReturn_E); ok {
		return x.E
	}
	return nil
}

type isOrderReturn_DexInfo interface {
	isOrderReturn_DexInfo()
}

type OrderReturn_Null struct {
	Null structpb.NullValue `protobuf:"varint,10,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderReturn_E struct {
	E *EthInfo `protobuf:"bytes,11,opt,name=e,proto3,oneof"` // dex转账需要的额外信息
}

func (*OrderReturn_Null) isOrderReturn_DexInfo() {}

func (*OrderReturn_E) isOrderReturn_DexInfo() {}

type OrderQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 支持按照producer+id或者exchange+id_ex两个维度进行单点查询
	Producer []byte            `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer,omitempty"`
	Id       int64             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                           // DeepTrading自维护ID，由策略产生，自增
	Exchange common.Exchange   `protobuf:"varint,3,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"` // 订单所在交易所，DEX的各种swap Dapp也通过本字段区分
	IdEx     string            `protobuf:"bytes,4,opt,name=id_ex,json=idEx,proto3" json:"id_ex,omitempty"`            //由OrderSys下单后得到，如CEX交易所返回提供，或DEX的TxHash
	Symbol   []byte            `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Market   common.Market     `protobuf:"varint,6,opt,name=market,proto3,enum=Market" json:"market,omitempty"`
	Type     common.SymbolType `protobuf:"varint,7,opt,name=type,proto3,enum=SymbolType" json:"type,omitempty"`
}

func (x *OrderQueryReq) Reset() {
	*x = OrderQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderQueryReq) ProtoMessage() {}

func (x *OrderQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderQueryReq.ProtoReflect.Descriptor instead.
func (*OrderQueryReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{13}
}

func (x *OrderQueryReq) GetProducer() []byte {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *OrderQueryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderQueryReq) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *OrderQueryReq) GetIdEx() string {
	if x != nil {
		return x.IdEx
	}
	return ""
}

func (x *OrderQueryReq) GetSymbol() []byte {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *OrderQueryReq) GetMarket() common.Market {
	if x != nil {
		return x.Market
	}
	return common.Market(0)
}

func (x *OrderQueryReq) GetType() common.SymbolType {
	if x != nil {
		return x.Type
	}
	return common.SymbolType(0)
}

type OrderQueryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Order:
	//	*OrderQueryRsp_Null
	//	*OrderQueryRsp_TradeCex
	//	*OrderQueryRsp_TradeDex
	//	*OrderQueryRsp_CancelCex
	//	*OrderQueryRsp_CancelDex
	//	*OrderQueryRsp_Transfer
	//	*OrderQueryRsp_Move
	//	*OrderQueryRsp_Harvest
	//	*OrderQueryRsp_Loan
	//	*OrderQueryRsp_Return
	Order isOrderQueryRsp_Order `protobuf_oneof:"order"`
}

func (x *OrderQueryRsp) Reset() {
	*x = OrderQueryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderQueryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderQueryRsp) ProtoMessage() {}

func (x *OrderQueryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderQueryRsp.ProtoReflect.Descriptor instead.
func (*OrderQueryRsp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{14}
}

func (m *OrderQueryRsp) GetOrder() isOrderQueryRsp_Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (x *OrderQueryRsp) GetNull() structpb.NullValue {
	if x, ok := x.GetOrder().(*OrderQueryRsp_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderQueryRsp) GetTradeCex() *OrderTradeCEX {
	if x, ok := x.GetOrder().(*OrderQueryRsp_TradeCex); ok {
		return x.TradeCex
	}
	return nil
}

func (x *OrderQueryRsp) GetTradeDex() *OrderTradeDEX {
	if x, ok := x.GetOrder().(*OrderQueryRsp_TradeDex); ok {
		return x.TradeDex
	}
	return nil
}

func (x *OrderQueryRsp) GetCancelCex() *OrderCancelCEX {
	if x, ok := x.GetOrder().(*OrderQueryRsp_CancelCex); ok {
		return x.CancelCex
	}
	return nil
}

func (x *OrderQueryRsp) GetCancelDex() *OrderCancelDEX {
	if x, ok := x.GetOrder().(*OrderQueryRsp_CancelDex); ok {
		return x.CancelDex
	}
	return nil
}

func (x *OrderQueryRsp) GetTransfer() *OrderTransfer {
	if x, ok := x.GetOrder().(*OrderQueryRsp_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *OrderQueryRsp) GetMove() *OrderMove {
	if x, ok := x.GetOrder().(*OrderQueryRsp_Move); ok {
		return x.Move
	}
	return nil
}

func (x *OrderQueryRsp) GetHarvest() *OrderHarvest {
	if x, ok := x.GetOrder().(*OrderQueryRsp_Harvest); ok {
		return x.Harvest
	}
	return nil
}

func (x *OrderQueryRsp) GetLoan() *OrderLoan {
	if x, ok := x.GetOrder().(*OrderQueryRsp_Loan); ok {
		return x.Loan
	}
	return nil
}

func (x *OrderQueryRsp) GetReturn() *OrderReturn {
	if x, ok := x.GetOrder().(*OrderQueryRsp_Return); ok {
		return x.Return
	}
	return nil
}

type isOrderQueryRsp_Order interface {
	isOrderQueryRsp_Order()
}

type OrderQueryRsp_Null struct {
	Null structpb.NullValue `protobuf:"varint,1,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderQueryRsp_TradeCex struct {
	TradeCex *OrderTradeCEX `protobuf:"bytes,2,opt,name=trade_cex,json=tradeCex,proto3,oneof"`
}

type OrderQueryRsp_TradeDex struct {
	TradeDex *OrderTradeDEX `protobuf:"bytes,3,opt,name=trade_dex,json=tradeDex,proto3,oneof"`
}

type OrderQueryRsp_CancelCex struct {
	CancelCex *OrderCancelCEX `protobuf:"bytes,4,opt,name=cancel_cex,json=cancelCex,proto3,oneof"`
}

type OrderQueryRsp_CancelDex struct {
	CancelDex *OrderCancelDEX `protobuf:"bytes,5,opt,name=cancel_dex,json=cancelDex,proto3,oneof"`
}

type OrderQueryRsp_Transfer struct {
	Transfer *OrderTransfer `protobuf:"bytes,6,opt,name=transfer,proto3,oneof"`
}

type OrderQueryRsp_Move struct {
	Move *OrderMove `protobuf:"bytes,7,opt,name=move,proto3,oneof"`
}

type OrderQueryRsp_Harvest struct {
	Harvest *OrderHarvest `protobuf:"bytes,8,opt,name=harvest,proto3,oneof"`
}

type OrderQueryRsp_Loan struct {
	Loan *OrderLoan `protobuf:"bytes,9,opt,name=loan,proto3,oneof"`
}

type OrderQueryRsp_Return struct {
	Return *OrderReturn `protobuf:"bytes,10,opt,name=return,proto3,oneof"`
}

func (*OrderQueryRsp_Null) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_TradeCex) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_TradeDex) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_CancelCex) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_CancelDex) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_Transfer) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_Move) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_Harvest) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_Loan) isOrderQueryRsp_Order() {}

func (*OrderQueryRsp_Return) isOrderQueryRsp_Order() {}

type OrderStatusQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 支持按照producer+id或者exchange+id_ex两个维度进行单点查询
	Producer []byte          `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer,omitempty"`
	Id       int64           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                           // DeepTrading自维护ID，由策略产生，自增
	Exchange common.Exchange `protobuf:"varint,3,opt,name=exchange,proto3,enum=Exchange" json:"exchange,omitempty"` // 订单所在交易所，DEX的各种swap Dapp也通过本字段区分
	IdEx     string          `protobuf:"bytes,4,opt,name=id_ex,json=idEx,proto3" json:"id_ex,omitempty"`            //由OrderSys下单后得到，如CEX交易所返回提供，或DEX的TxHash
}

func (x *OrderStatusQueryReq) Reset() {
	*x = OrderStatusQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusQueryReq) ProtoMessage() {}

func (x *OrderStatusQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusQueryReq.ProtoReflect.Descriptor instead.
func (*OrderStatusQueryReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{15}
}

func (x *OrderStatusQueryReq) GetProducer() []byte {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *OrderStatusQueryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderStatusQueryReq) GetExchange() common.Exchange {
	if x != nil {
		return x.Exchange
	}
	return common.Exchange(0)
}

func (x *OrderStatusQueryReq) GetIdEx() string {
	if x != nil {
		return x.IdEx
	}
	return ""
}

type OrderStatusQueryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OrderStatus:
	//	*OrderStatusQueryRsp_Null
	//	*OrderStatusQueryRsp_Status
	OrderStatus isOrderStatusQueryRsp_OrderStatus `protobuf_oneof:"order_status"`
}

func (x *OrderStatusQueryRsp) Reset() {
	*x = OrderStatusQueryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusQueryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusQueryRsp) ProtoMessage() {}

func (x *OrderStatusQueryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusQueryRsp.ProtoReflect.Descriptor instead.
func (*OrderStatusQueryRsp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{16}
}

func (m *OrderStatusQueryRsp) GetOrderStatus() isOrderStatusQueryRsp_OrderStatus {
	if m != nil {
		return m.OrderStatus
	}
	return nil
}

func (x *OrderStatusQueryRsp) GetNull() structpb.NullValue {
	if x, ok := x.GetOrderStatus().(*OrderStatusQueryRsp_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderStatusQueryRsp) GetStatus() *OrderStatus {
	if x, ok := x.GetOrderStatus().(*OrderStatusQueryRsp_Status); ok {
		return x.Status
	}
	return nil
}

type isOrderStatusQueryRsp_OrderStatus interface {
	isOrderStatusQueryRsp_OrderStatus()
}

type OrderStatusQueryRsp_Null struct {
	Null structpb.NullValue `protobuf:"varint,1,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderStatusQueryRsp_Status struct {
	Status *OrderStatus `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

func (*OrderStatusQueryRsp_Null) isOrderStatusQueryRsp_OrderStatus() {}

func (*OrderStatusQueryRsp_Status) isOrderStatusQueryRsp_OrderStatus() {}

type OrderTransferCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Producer  []byte          `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer,omitempty"`
	StartTime int64           `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // millisecond
	EndTime   int64           `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // millisecond
	Asset     string          `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount    float64         `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Chain     common.Chain    `protobuf:"varint,9,opt,name=chain,proto3,enum=Chain" json:"chain,omitempty"`               // 转账使用的chain
	From      common.Exchange `protobuf:"varint,10,opt,name=from,proto3,enum=Exchange" json:"from,omitempty"`             // 转账发起交易所
	To        common.Exchange `protobuf:"varint,11,opt,name=to,proto3,enum=Exchange" json:"to,omitempty"`                 // 转账目的交易所
	ToAddr    []byte          `protobuf:"bytes,12,opt,name=to_addr,json=toAddr,proto3" json:"to_addr,omitempty"`          // 目的交易所地址，可选字段
	ToAccount []byte          `protobuf:"bytes,13,opt,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"` // 目的交易所账户
	// 目前支持client.TransferHistoryItem和client.RspTxInfo序列化成json的格式
	// 使用json主要为了避免对client proto的强依赖
	TransferInfoJson []byte `protobuf:"bytes,14,opt,name=transfer_info_json,json=transferInfoJson,proto3" json:"transfer_info_json,omitempty"`
}

func (x *OrderTransferCheckReq) Reset() {
	*x = OrderTransferCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTransferCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTransferCheckReq) ProtoMessage() {}

func (x *OrderTransferCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTransferCheckReq.ProtoReflect.Descriptor instead.
func (*OrderTransferCheckReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{17}
}

func (x *OrderTransferCheckReq) GetProducer() []byte {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *OrderTransferCheckReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *OrderTransferCheckReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *OrderTransferCheckReq) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *OrderTransferCheckReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderTransferCheckReq) GetChain() common.Chain {
	if x != nil {
		return x.Chain
	}
	return common.Chain(0)
}

func (x *OrderTransferCheckReq) GetFrom() common.Exchange {
	if x != nil {
		return x.From
	}
	return common.Exchange(0)
}

func (x *OrderTransferCheckReq) GetTo() common.Exchange {
	if x != nil {
		return x.To
	}
	return common.Exchange(0)
}

func (x *OrderTransferCheckReq) GetToAddr() []byte {
	if x != nil {
		return x.ToAddr
	}
	return nil
}

func (x *OrderTransferCheckReq) GetToAccount() []byte {
	if x != nil {
		return x.ToAccount
	}
	return nil
}

func (x *OrderTransferCheckReq) GetTransferInfoJson() []byte {
	if x != nil {
		return x.TransferInfoJson
	}
	return nil
}

type OrderTransferCheckRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OrderCheck:
	//	*OrderTransferCheckRsp_Null
	//	*OrderTransferCheckRsp_DepositInfoJson
	OrderCheck isOrderTransferCheckRsp_OrderCheck `protobuf_oneof:"order_check"`
}

func (x *OrderTransferCheckRsp) Reset() {
	*x = OrderTransferCheckRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTransferCheckRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTransferCheckRsp) ProtoMessage() {}

func (x *OrderTransferCheckRsp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTransferCheckRsp.ProtoReflect.Descriptor instead.
func (*OrderTransferCheckRsp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{18}
}

func (m *OrderTransferCheckRsp) GetOrderCheck() isOrderTransferCheckRsp_OrderCheck {
	if m != nil {
		return m.OrderCheck
	}
	return nil
}

func (x *OrderTransferCheckRsp) GetNull() structpb.NullValue {
	if x, ok := x.GetOrderCheck().(*OrderTransferCheckRsp_Null); ok {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *OrderTransferCheckRsp) GetDepositInfoJson() []byte {
	if x, ok := x.GetOrderCheck().(*OrderTransferCheckRsp_DepositInfoJson); ok {
		return x.DepositInfoJson
	}
	return nil
}

type isOrderTransferCheckRsp_OrderCheck interface {
	isOrderTransferCheckRsp_OrderCheck()
}

type OrderTransferCheckRsp_Null struct {
	Null structpb.NullValue `protobuf:"varint,1,opt,name=null,proto3,enum=google.protobuf.NullValue,oneof"`
}

type OrderTransferCheckRsp_DepositInfoJson struct {
	// 目前只支持client.DepositHistoryItem序列化成json的格式
	// 使用json主要为了避免对client proto的强依赖
	DepositInfoJson []byte `protobuf:"bytes,2,opt,name=deposit_info_json,json=depositInfoJson,proto3,oneof"`
}

func (*OrderTransferCheckRsp_Null) isOrderTransferCheckRsp_OrderCheck() {}

func (*OrderTransferCheckRsp_DepositInfoJson) isOrderTransferCheckRsp_OrderCheck() {}

var File_order_order_proto protoreflect.FileDescriptor

var file_order_order_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x04, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x03,
	0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x45, 0x78, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x71, 0x74, 0x79, 0x46, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x22, 0x8f, 0x04, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x69, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x03, 0x74, 0x69, 0x66, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x64, 0x45, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x07, 0x45, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x43, 0x68, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb8, 0x04, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x45, 0x58, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03,
	0x68, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x74, 0x69, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x03, 0x74, 0x69, 0x66, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x0c, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x65, 0x64, 0x67, 0x65, 0x52, 0x0b, 0x68, 0x65, 0x64, 0x67, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x22, 0x39, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x22, 0x96,
	0x05, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x45, 0x58,
	0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x69, 0x66,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x03, 0x74, 0x69, 0x66, 0x12,
	0x31, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x0b, 0x68, 0x65, 0x64, 0x67, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c,
	0x12, 0x1e, 0x0a, 0x01, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x01, 0x65,
	0x22, 0x39, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x45, 0x58, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x22, 0x39,
	0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x22, 0xcd, 0x02, 0x0a, 0x0e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x45, 0x58, 0x12, 0x1c, 0x0a, 0x03,
	0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75,
	0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x01, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x01, 0x65, 0x22, 0x39, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x42, 0x0a, 0x0a,
	0x08, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xe5, 0x04, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x03, 0x68,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x01, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x01, 0x65, 0x22, 0x3d, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0xc7, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d,
	0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x01, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x01, 0x65, 0x22, 0x38, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x42,
	0x0a, 0x0a, 0x08, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x03,
	0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a,
	0x01, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x01, 0x65, 0x22, 0x37, 0x0a,
	0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x52,
	0x56, 0x45, 0x53, 0x54, 0x10, 0x05, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x6e,
	0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x12, 0x1e, 0x0a, 0x01, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x01,
	0x65, 0x22, 0x38, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x42, 0x0a, 0x0a, 0x08, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x01, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x01, 0x65, 0x22, 0x38, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b,
	0x65, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x04, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd1,
	0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x45, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x07, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x87, 0x04, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x63, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x45, 0x58, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x45, 0x58, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x78,
	0x12, 0x36, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x45, 0x58, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x44, 0x45, 0x58, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x78,
	0x12, 0x32, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x04, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x6e, 0x48, 0x00, 0x52,
	0x04, 0x6c, 0x6f, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x13,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x45, 0x78, 0x22, 0x85, 0x01, 0x0a, 0x13,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x06, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x19,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0x86, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2a, 0xaf, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x45, 0x58, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x43, 0x45, 0x58, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x58, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54, 0x10, 0x07,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x0a, 0x2a, 0xd0, 0x01, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x45, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x54, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x2a, 0x8e, 0x02,
	0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x54, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x44, 0x4c, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x17, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10, 0x18, 0x2a, 0x69,
	0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x64, 0x2a, 0x33, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x4b, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x58,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x49, 0x46, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x54, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x43, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x4f, 0x4b, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x58, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x0e, 0x2a, 0x77, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x55, 0x59,
	0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45,
	0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x55, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0x06, 0x2a, 0x53, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x78,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x65, 0x65,
	0x54, 0x78, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x78, 0x10, 0x03, 0x2a, 0x36, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x75, 0x62, 0x10, 0x04, 0x42, 0x3e,
	0x0a, 0x16, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_order_proto_rawDescOnce sync.Once
	file_order_order_proto_rawDescData = file_order_order_proto_rawDesc
)

func file_order_order_proto_rawDescGZIP() []byte {
	file_order_order_proto_rawDescOnce.Do(func() {
		file_order_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_order_proto_rawDescData)
	})
	return file_order_order_proto_rawDescData
}

var file_order_order_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_order_order_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_order_order_proto_goTypes = []interface{}{
	(OrderSysType)(0),             // 0: order.OrderSysType
	(OrderType)(0),                // 1: order.OrderType
	(OrderStatusCode)(0),          // 2: order.OrderStatusCode
	(OrderFailCode)(0),            // 3: order.OrderFailCode
	(TradeType)(0),                // 4: order.TradeType
	(TimeInForce)(0),              // 5: order.TimeInForce
	(TradeSide)(0),                // 6: order.TradeSide
	(EthTransactionType)(0),       // 7: order.EthTransactionType
	(OrderMoveUserType)(0),        // 8: order.OrderMoveUserType
	(OrderTradeCEX_AclKey)(0),     // 9: order.OrderTradeCEX.AclKey
	(OrderTradeDEX_AclKey)(0),     // 10: order.OrderTradeDEX.AclKey
	(OrderCancelCEX_AclKey)(0),    // 11: order.OrderCancelCEX.AclKey
	(OrderCancelDEX_AclKey)(0),    // 12: order.OrderCancelDEX.AclKey
	(OrderTransfer_AclKey)(0),     // 13: order.OrderTransfer.AclKey
	(OrderMove_AclKey)(0),         // 14: order.OrderMove.AclKey
	(OrderHarvest_AclKey)(0),      // 15: order.OrderHarvest.AclKey
	(OrderLoan_AclKey)(0),         // 16: order.OrderLoan.AclKey
	(OrderReturn_AclKey)(0),       // 17: order.OrderReturn.AclKey
	(*OrderStatus)(nil),           // 18: order.OrderStatus
	(*OrderHedge)(nil),            // 19: order.OrderHedge
	(*OrderBase)(nil),             // 20: order.OrderBase
	(*EthInfo)(nil),               // 21: order.EthInfo
	(*OrderTradeCEX)(nil),         // 22: order.OrderTradeCEX
	(*OrderTradeDEX)(nil),         // 23: order.OrderTradeDEX
	(*OrderCancelCEX)(nil),        // 24: order.OrderCancelCEX
	(*OrderCancelDEX)(nil),        // 25: order.OrderCancelDEX
	(*OrderTransfer)(nil),         // 26: order.OrderTransfer
	(*OrderMove)(nil),             // 27: order.OrderMove
	(*OrderHarvest)(nil),          // 28: order.OrderHarvest
	(*OrderLoan)(nil),             // 29: order.OrderLoan
	(*OrderReturn)(nil),           // 30: order.OrderReturn
	(*OrderQueryReq)(nil),         // 31: order.OrderQueryReq
	(*OrderQueryRsp)(nil),         // 32: order.OrderQueryRsp
	(*OrderStatusQueryReq)(nil),   // 33: order.OrderStatusQueryReq
	(*OrderStatusQueryRsp)(nil),   // 34: order.OrderStatusQueryRsp
	(*OrderTransferCheckReq)(nil), // 35: order.OrderTransferCheckReq
	(*OrderTransferCheckRsp)(nil), // 36: order.OrderTransferCheckRsp
	(*common.MsgHeader)(nil),      // 37: MsgHeader
	(common.Exchange)(0),          // 38: Exchange
	(common.Market)(0),            // 39: Market
	(common.SymbolType)(0),        // 40: SymbolType
	(*anypb.Any)(nil),             // 41: google.protobuf.Any
	(structpb.NullValue)(0),       // 42: google.protobuf.NullValue
	(common.Chain)(0),             // 43: Chain
}
var file_order_order_proto_depIdxs = []int32{
	37, // 0: order.OrderStatus.hdr:type_name -> MsgHeader
	0,  // 1: order.OrderStatus.order_sys_type:type_name -> order.OrderSysType
	38, // 2: order.OrderStatus.exchange:type_name -> Exchange
	2,  // 3: order.OrderStatus.status:type_name -> order.OrderStatusCode
	1,  // 4: order.OrderHedge.order_type:type_name -> order.OrderType
	4,  // 5: order.OrderHedge.trade_type:type_name -> order.TradeType
	6,  // 6: order.OrderHedge.side:type_name -> order.TradeSide
	5,  // 7: order.OrderHedge.tif:type_name -> order.TimeInForce
	38, // 8: order.OrderHedge.exchange:type_name -> Exchange
	39, // 9: order.OrderHedge.market:type_name -> Market
	40, // 10: order.OrderHedge.type:type_name -> SymbolType
	38, // 11: order.OrderBase.exchange:type_name -> Exchange
	39, // 12: order.OrderBase.market:type_name -> Market
	40, // 13: order.OrderBase.type:type_name -> SymbolType
	7,  // 14: order.EthInfo.tx_type:type_name -> order.EthTransactionType
	37, // 15: order.OrderTradeCEX.hdr:type_name -> MsgHeader
	20, // 16: order.OrderTradeCEX.base:type_name -> order.OrderBase
	1,  // 17: order.OrderTradeCEX.order_type:type_name -> order.OrderType
	4,  // 18: order.OrderTradeCEX.trade_type:type_name -> order.TradeType
	6,  // 19: order.OrderTradeCEX.side:type_name -> order.TradeSide
	5,  // 20: order.OrderTradeCEX.tif:type_name -> order.TimeInForce
	41, // 21: order.OrderTradeCEX.order_ext:type_name -> google.protobuf.Any
	19, // 22: order.OrderTradeCEX.hedge_expect:type_name -> order.OrderHedge
	37, // 23: order.OrderTradeDEX.hdr:type_name -> MsgHeader
	20, // 24: order.OrderTradeDEX.base:type_name -> order.OrderBase
	1,  // 25: order.OrderTradeDEX.order_type:type_name -> order.OrderType
	4,  // 26: order.OrderTradeDEX.trade_type:type_name -> order.TradeType
	6,  // 27: order.OrderTradeDEX.side:type_name -> order.TradeSide
	5,  // 28: order.OrderTradeDEX.tif:type_name -> order.TimeInForce
	41, // 29: order.OrderTradeDEX.order_ext:type_name -> google.protobuf.Any
	19, // 30: order.OrderTradeDEX.hedge_expect:type_name -> order.OrderHedge
	42, // 31: order.OrderTradeDEX.null:type_name -> google.protobuf.NullValue
	21, // 32: order.OrderTradeDEX.e:type_name -> order.EthInfo
	37, // 33: order.OrderCancelCEX.hdr:type_name -> MsgHeader
	20, // 34: order.OrderCancelCEX.base:type_name -> order.OrderBase
	6,  // 35: order.OrderCancelCEX.side:type_name -> order.TradeSide
	37, // 36: order.OrderCancelDEX.hdr:type_name -> MsgHeader
	20, // 37: order.OrderCancelDEX.base:type_name -> order.OrderBase
	6,  // 38: order.OrderCancelDEX.side:type_name -> order.TradeSide
	42, // 39: order.OrderCancelDEX.null:type_name -> google.protobuf.NullValue
	21, // 40: order.OrderCancelDEX.e:type_name -> order.EthInfo
	37, // 41: order.OrderTransfer.hdr:type_name -> MsgHeader
	20, // 42: order.OrderTransfer.base:type_name -> order.OrderBase
	43, // 43: order.OrderTransfer.chain:type_name -> Chain
	38, // 44: order.OrderTransfer.exchange_to:type_name -> Exchange
	42, // 45: order.OrderTransfer.null:type_name -> google.protobuf.NullValue
	21, // 46: order.OrderTransfer.e:type_name -> order.EthInfo
	37, // 47: order.OrderMove.hdr:type_name -> MsgHeader
	20, // 48: order.OrderMove.base:type_name -> order.OrderBase
	39, // 49: order.OrderMove.source:type_name -> Market
	39, // 50: order.OrderMove.target:type_name -> Market
	8,  // 51: order.OrderMove.action_user:type_name -> order.OrderMoveUserType
	42, // 52: order.OrderMove.null:type_name -> google.protobuf.NullValue
	21, // 53: order.OrderMove.e:type_name -> order.EthInfo
	37, // 54: order.OrderHarvest.hdr:type_name -> MsgHeader
	20, // 55: order.OrderHarvest.base:type_name -> order.OrderBase
	42, // 56: order.OrderHarvest.null:type_name -> google.protobuf.NullValue
	21, // 57: order.OrderHarvest.e:type_name -> order.EthInfo
	37, // 58: order.OrderLoan.hdr:type_name -> MsgHeader
	20, // 59: order.OrderLoan.base:type_name -> order.OrderBase
	42, // 60: order.OrderLoan.null:type_name -> google.protobuf.NullValue
	21, // 61: order.OrderLoan.e:type_name -> order.EthInfo
	37, // 62: order.OrderReturn.hdr:type_name -> MsgHeader
	20, // 63: order.OrderReturn.base:type_name -> order.OrderBase
	42, // 64: order.OrderReturn.null:type_name -> google.protobuf.NullValue
	21, // 65: order.OrderReturn.e:type_name -> order.EthInfo
	38, // 66: order.OrderQueryReq.exchange:type_name -> Exchange
	39, // 67: order.OrderQueryReq.market:type_name -> Market
	40, // 68: order.OrderQueryReq.type:type_name -> SymbolType
	42, // 69: order.OrderQueryRsp.null:type_name -> google.protobuf.NullValue
	22, // 70: order.OrderQueryRsp.trade_cex:type_name -> order.OrderTradeCEX
	23, // 71: order.OrderQueryRsp.trade_dex:type_name -> order.OrderTradeDEX
	24, // 72: order.OrderQueryRsp.cancel_cex:type_name -> order.OrderCancelCEX
	25, // 73: order.OrderQueryRsp.cancel_dex:type_name -> order.OrderCancelDEX
	26, // 74: order.OrderQueryRsp.transfer:type_name -> order.OrderTransfer
	27, // 75: order.OrderQueryRsp.move:type_name -> order.OrderMove
	28, // 76: order.OrderQueryRsp.harvest:type_name -> order.OrderHarvest
	29, // 77: order.OrderQueryRsp.loan:type_name -> order.OrderLoan
	30, // 78: order.OrderQueryRsp.return:type_name -> order.OrderReturn
	38, // 79: order.OrderStatusQueryReq.exchange:type_name -> Exchange
	42, // 80: order.OrderStatusQueryRsp.null:type_name -> google.protobuf.NullValue
	18, // 81: order.OrderStatusQueryRsp.status:type_name -> order.OrderStatus
	43, // 82: order.OrderTransferCheckReq.chain:type_name -> Chain
	38, // 83: order.OrderTransferCheckReq.from:type_name -> Exchange
	38, // 84: order.OrderTransferCheckReq.to:type_name -> Exchange
	42, // 85: order.OrderTransferCheckRsp.null:type_name -> google.protobuf.NullValue
	86, // [86:86] is the sub-list for method output_type
	86, // [86:86] is the sub-list for method input_type
	86, // [86:86] is the sub-list for extension type_name
	86, // [86:86] is the sub-list for extension extendee
	0,  // [0:86] is the sub-list for field type_name
}

func init() { file_order_order_proto_init() }
func file_order_order_proto_init() {
	if File_order_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHedge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTradeCEX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTradeDEX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancelCEX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancelDEX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHarvest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderLoan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderQueryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusQueryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTransferCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTransferCheckRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_order_order_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*OrderTradeDEX_Null)(nil),
		(*OrderTradeDEX_E)(nil),
	}
	file_order_order_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*OrderCancelDEX_Null)(nil),
		(*OrderCancelDEX_E)(nil),
	}
	file_order_order_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*OrderTransfer_Null)(nil),
		(*OrderTransfer_E)(nil),
	}
	file_order_order_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*OrderMove_Null)(nil),
		(*OrderMove_E)(nil),
	}
	file_order_order_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*OrderHarvest_Null)(nil),
		(*OrderHarvest_E)(nil),
	}
	file_order_order_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*OrderLoan_Null)(nil),
		(*OrderLoan_E)(nil),
	}
	file_order_order_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*OrderReturn_Null)(nil),
		(*OrderReturn_E)(nil),
	}
	file_order_order_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*OrderQueryRsp_Null)(nil),
		(*OrderQueryRsp_TradeCex)(nil),
		(*OrderQueryRsp_TradeDex)(nil),
		(*OrderQueryRsp_CancelCex)(nil),
		(*OrderQueryRsp_CancelDex)(nil),
		(*OrderQueryRsp_Transfer)(nil),
		(*OrderQueryRsp_Move)(nil),
		(*OrderQueryRsp_Harvest)(nil),
		(*OrderQueryRsp_Loan)(nil),
		(*OrderQueryRsp_Return)(nil),
	}
	file_order_order_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*OrderStatusQueryRsp_Null)(nil),
		(*OrderStatusQueryRsp_Status)(nil),
	}
	file_order_order_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*OrderTransferCheckRsp_Null)(nil),
		(*OrderTransferCheckRsp_DepositInfoJson)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_order_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_order_order_proto_goTypes,
		DependencyIndexes: file_order_order_proto_depIdxs,
		EnumInfos:         file_order_order_proto_enumTypes,
		MessageInfos:      file_order_order_proto_msgTypes,
	}.Build()
	File_order_order_proto = out.File
	file_order_order_proto_rawDesc = nil
	file_order_order_proto_goTypes = nil
	file_order_order_proto_depIdxs = nil
}
